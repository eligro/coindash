import React, { Component } from 'react'
import { Link, browserHistory } from 'react-router'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import FontAwesome from 'react-fontawesome'
import { FormGroup, ControlLabel, FormControl, HelpBlock, Button } from 'react-bootstrap'
import { debounce } from 'lodash'
import { NoAuthPage as Page, Card, Analytics } from 'osi/components'
import { Logo } from 'osi/bits'
import './login.css'
import packageJson from '../../../../../package.json'
import * as userActions from '../../../../actions/user.actions'
import Spinner from 'osi/bits/spinner'

import Paper from 'osi/bits/paper'

export function FieldGroup ({ id, label, help, error, className, ...props }) {
  return (
    <FormGroup controlId={id} className={className}>
      <ControlLabel>{label}</ControlLabel>
      <FormControl {...props} />
      {help && <HelpBlock>{help}</HelpBlock>}
      {error && <HelpBlock className='error'>{error}</HelpBlock>}
    </FormGroup>
  )
}

class LoginPage extends Component {
  constructor (props) {
    super(props)
    this.state = {
      waitingOnLogin: false,
      inputs: {
        email: '',
        password: '',
        member: false
      }
    }

    this.handleChange = debounce((newValue) => {
      this.handleChanges({inputs: {ident: newValue}})
    }, 180)
  }

  componentWillUpdate (nextProps) {
    if (nextProps.user.loggedIn) this.onLogin()
  }

  onLogin () {
    Analytics.event({ category: 'User', action: 'Identify', label: this.state.inputs.ident, nonInteraction: false })
    browserHistory.push('/dashboard')
  }

  signinButton (name, title, {disabled = false}) {
    return <Button className={`signin-with ${name}`} disabled={disabled} onClick={() => this.signinWith(name)} block><FontAwesome name={name} /> Sign in with {title}</Button>
  }
  signinWith (provider) {

  }
  handleChanges (newValue) {
    this.setState(newValue)
  }

  handleLogin (event) {
    event.preventDefault()
    Analytics.event({category: 'User', action: 'Identify', label: this.state.inputs.email.replace(/[@.]/, '-'), nonInteraction: false})
    this.setState({ waitingOnLogin: true })
    this.props.userActions.login(this.state.inputs.email, this.state.inputs.password)
      .then(this.onLogin)
      .catch(error => {
        this.setState({userError: error, waitingOnLogin: false})
      })
  }

  componentDidMount () {
    this.updateWindowDimensions()
    window.addEventListener('resize', this.updateWindowDimensions.bind(this))
  }

  componentWillUnmount () {
    window.removeEventListener('resize', this.updateWindowDimensions.bind(this))
  }

  updateWindowDimensions () {
    this.setState({ width: window.innerWidth, height: window.innerHeight })
  }
//
// {this.signinButton('google', 'Google', {disabled: true})}
// {this.signinButton('facebook', 'Facebook', {disabled: true})}
// <span className='seperator'>Or</span>
//
  render () {
    return (
      <Page className={['login', this.state.waitingOnLogin && 'is-loading'].join(' ')}>
        <Paper>
          <Card className='login' title='&nbsp;' headerActions={<Link to='/'><FontAwesome name='times' /></Link>}>
            <div className='brand'>
              <Logo version={packageJson.version} />
            </div>

            <h3>Sign In</h3>
            <div className='up'>
              <form>
                <FieldGroup className={!!this.state.inputs.email && 'has-value'}
                  type='text'
                  label='Email'
                  placeholder='Email'
                  error={this.state.userError && this.state.userError.code && this.state.userError.code.match(/email/) && this.state.userError.message}
                  onChange={e => this.setState({
                    inputs: { ...this.state.inputs, email: e.target.value }
                  })} />
                <FieldGroup id='password'
                  type='password'
                  label='Password'
                  error={this.state.userError && this.state.userError.code.match(/password/) && this.state.userError.message}
                  placeholder='Password'
                  onChange={e => this.setState({inputs: { ...this.state.inputs, password: e.target.value }})} />
                <Button type='submit' disabled={!this.state.inputs.email && !this.state.inputs.password} onClick={this.handleLogin.bind(this)} bsStyle='primary' block>Continue</Button>
              </form>

              <hr />
              <div className='beta-test'>
                <p>First time beta tester? <Link to='/login/reset-password'>Reset Password</Link></p>
              </div>
            </div>
            {this.state.waitingOnLogin && <Spinner />}

          </Card>
        </Paper>
      </Page>

    )
  }
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(LoginPage)
