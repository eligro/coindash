import React, { Component } from 'react'
import { connect } from 'react-redux'

import { bindActionCreators } from 'redux'

import * as userActions from '../../../../../../actions/user.actions'
import * as portfolioActions from '../../../../../../actions/portfolio.actions'

import RaisedButton from 'material-ui/RaisedButton'

import {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card'
import FlatButton from 'material-ui/FlatButton'
import Toggle from 'material-ui/Toggle'
import Dialog from 'material-ui/Dialog'
import TextField from 'material-ui/TextField'

class PortfolioCard extends Component {
  constructor (props) {
    super(props)
    this.state = {
      expanded: false
    }
  }

  handleExpandChange (expanded) {
    this.setState({expanded: expanded})
  }

  handleToggle (event, toggle) {
    this.setState({expanded: toggle})
  }

  handleExpand () {
    this.setState({expanded: true})
  }

  handleReduce () {
    this.setState({expanded: false})
  }

  render () {
    return (
      <Card expanded={this.state.expanded} onExpandChange={this.handleExpandChange}>
        <CardHeader
          title={this.props.portfolio.name}
          subtitle={this.props.portfolio.description}
          avatar='images/ok-128.jpg'
          actAsExpander
          showExpandableButton
        />
        <CardText>
          <Toggle
            toggled={this.state.expanded}
            onToggle={this.handleToggle}
            labelPosition='right'
            label='This toggle controls the expanded state of the component.'
          />
        </CardText>
        <CardMedia
          expandable
          overlay={<CardTitle title='Overlay title' subtitle='Overlay subtitle' />}
        >
          <img src='images/nature-600-337.jpg' alt='' />
        </CardMedia>
        <CardTitle title='Card title' subtitle='Card subtitle' expandable />
        <CardText expandable>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
          Donec mattis pretium massa. Aliquam erat volutpat. Nulla facilisi.
          Donec vulputate interdum sollicitudin. Nunc lacinia auctor quam sed pellentesque.
          Aliquam dui mauris, mattis quis lacus id, pellentesque lobortis odio.
        </CardText>
        <CardActions>
          <FlatButton label='Expand' onTouchTap={this.handleExpand} />
          <FlatButton label='Reduce' onTouchTap={this.handleReduce} />
        </CardActions>
      </Card>
    )
  }
}

class CreatePortfolioDialog extends Component {
  constructor (props) {
    super(props)

    this.state = {
      allowSubmit: false
    }
  }

  onSubmit (e) {
    const { uid } = this.props.user.profile
    const name = this.refs.name.getValue()
    const description = this.refs.description.getValue()

    const { onCreate = () => {} } = this.props
    e.preventDefault()

    this.props.portfolioActions.newPortfolio({name, description, uid})
      .then(pmResult => {
        console.info('portfolio creation result:', pmResult)
        onCreate(pmResult)
      })
  }
  valuesUpdated (e) {
    const name = this.refs.name.getValue()
    const { allowSubmit } = this.state
    if ((allowSubmit && !name) || (!allowSubmit && name)) {
      this.setState({allowSubmit: !!name})
    }
  }
  render () {
    const { allowSubmit } = this.state
    return (
      <Dialog
        title='Create Portfolio'
        actions={([
          <FlatButton
            label='Cancel'
            primary
            onTouchTap={this.handleClose}
          />,
          <FlatButton
            label='Submit'
            primary
            disabled={!allowSubmit}
            onTouchTap={e => this.onSubmit(e)}
          />
        ])}
        modal
        open={this.props.isOpen}
      >
        <form onSubmit={e => this.onSubmit(e)}>
          <div>
            <TextField
              ref='name'
              floatingLabelText='Portfolio name'
              onChange={e => this.valuesUpdated()}
            />
          </div>
          <div>
            <TextField
              ref='description'
              multiLine
              floatingLabelText='Description'
              hintText='Give your portfolio a description'
            />
          </div>
        </form>
      </Dialog>
    )
  }
}

const ConnectedCreatePortfolioDialog = connect(mapStateToProps, mapDispatchToProps)(CreatePortfolioDialog)

class Home extends Component {
  constructor (props) {
    super(props)

    this.state = {
      createPortfolioOpen: false
    }
  }

  createPortfolio () {
    console.log('lets create a portfolio')

    this.setState({createPortfolioOpen: true})

    // this.props.portfolioActions.newPortfolio({
    //   name: 'Elis first portfolio',
    //   description: 'My first!',
    //   uid
    // })
    //   .then(pmResult => {
    //     console.info('portfolio creation result:', pmResult)
    //   })
  }
  clearPortfolios () {
    // this.props.portfolioActions.clearPortfolios()
  }
  onPortfolioCreated (dat) {
    console.info('what is dat?', dat)
    this.props.portfolioActions.loadUserPortfolios(this.props.user.profile.uid)
      .then(res => {
        console.log('what is res?', res)

        this.setState({createPortfolioOpen: false})
      })
  }
  render () {
    const { portfolio } = this.props
    const { userPortfolios = [] } = portfolio
    console.info('user portfolios:', userPortfolios, 'portfolio', portfolio)
    return (
      <div>
        <h2>My Portfolios</h2>

        <RaisedButton label='Create new Portfolio' onClick={e => this.createPortfolio()} />
        <RaisedButton label='Clear Portfolios' onClick={e => this.clearPortfolios()} />

        <hr />

        {userPortfolios.map(upf => (
          <PortfolioCard key={upf.pfid} portfolio={upf.portfolio} />
        ))}

        <ConnectedCreatePortfolioDialog
          onCreate={pf => this.onPortfolioCreated(pf)}
          isOpen={this.state.createPortfolioOpen} />
      </div>
    )
  }
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    portfolio: state.portfolio
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch),
    portfolioActions: bindActionCreators(portfolioActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(Home)
