import firebase from '../../../utils/database.react.js'

const Auth = firebase.auth()

let initialized = false
let currentUser = Auth.currentUser

Auth.onAuthStateChanged(user => {
  currentUser = user
  if (!initialized) initialized = true
})

export const signOut = () => {
  return Auth.signOut()
    .then((e) => {
      currentUser = null
      return true
    })
}

export const signInWithEmailAndPassword = (email, password) => {
  return Auth.signInWithEmailAndPassword(email, password)
  .then((data) => {
    currentUser = data
    return data
  })
}

const waitToInitialize = na => {
  return new Promise((resolve, reject) => {
    const intId = setInterval(() => {
      if (initialized) {
        resolve()
        clearInterval(intId)
      }
    }, 80)
  })
}

/**
 * Use with onEnter route prop to restrict areas to authenticated users
 *
 * Usage example:
 *
 * ```jsx
 * import { requireAuth } from 'osi/auth'
 *
 * <Route path='/dashboard' component={App} onEnter={requireAuth}>
 * ```
 */
export const requireAuth = (nextState, replace, done) => {
  if (initialized && currentUser && currentUser.uid) done()
  else if (initialized && (!currentUser || currentUser.uid)) {
    replace('/login')
    done('Unauthorized Access')
  } else {
    waitToInitialize().then(na => {
      if (!currentUser || !currentUser.uid) {
        replace('/login')
      }
      done()
    })
  }
}

/**
 * Use with onEnter route configuration to redirect a user to the specified
 * location in the `to` param if the user is authenticated
 *
 * Usage example:
 *
 * ```jsx
 * import { redirectIfAuth } from 'osi/auth'
 *
 * <Route path='/login' onEnter={redirectIfAuth('/dashboard')}>
 * ```
 *
 * If user tries to enter `/login` but is already authenticated he will be
 * redirected to `/dashboard`
 *
 * @param  {string} to Where to transition the user to
 * @return {function}    Function to be passed to onEnter prop in `<Route/>`
 */
export const redirectIfAuth = to => (nextState, replace, done) => {
  if (initialized && currentUser && currentUser.uid) {
    replace(to)
    done()
  } else if (initialized && (!currentUser || currentUser.uid)) done()
  else {
    waitToInitialize().then(na => {
      if (currentUser && currentUser.uid) replace(to)
      done()
    })
  }
}

export default { ...Auth, signOut, signInWithEmailAndPassword }
