import React, { Component } from 'react'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import Dialog from 'material-ui/Dialog'
import FlatButton from 'material-ui/FlatButton'
import Button from 'react-md/lib/Buttons/Button'
import * as userActions from '../../../../../../../actions/user.actions'
import packageJSON from '../../../../../../../../package.json'
import semver from 'semver'
import marked from 'marked'
import Tour from 'reactour'

class TourGuide extends Component {
  constructor (props) {
    super(props)
    this.state = { isOpen: false }
  }

  componentWillMount () {
    this.checkIfReady(this.props, this.state)
  }
  componentWillUpdate (nextProps, nextState) {
    this.checkIfReady(nextProps, nextState)
  }

  checkIfReady (nextProps, nextState) {
    const { version } = packageJSON
    const { propertiesLastUpdate: lastUpdate } = nextProps.user
    const { lastTourVersion } = nextProps.userProps || {}
    const { isOpen } = nextState

    const { lastCalculated } = nextProps

    // Check App version state
    if (lastUpdate && lastCalculated && !lastTourVersion && !isOpen) {
      this.props.userActions.showTourGuide()
    }

    if (!isOpen && lastUpdate && !lastTourVersion) {
      this.setState({isOpen: true})
    } else if (!isOpen && lastUpdate && semver.gt(version, lastTourVersion)) {
      this.setState({isOpen: true})
    } else if (isOpen && lastTourVersion === version) {
      this.setState({isOpen: false})
    }
  }

  handleDismiss () {
    const { uid } = this.props.user.profile
    const { version } = packageJSON

    this.props.userActions.hideTourGuide(uid, version)
    this.setState({isOpen: false})
  }

  onStep (stepId) {
    console.log('we stepped to:', stepId)
  }

  render () {
    const { markdown } = this.state
    const { version } = packageJSON
    const actions = [
      <FlatButton
        label='Dismiss'
        primary
        onTouchTap={this.handleDismiss.bind(this)}
      />
    ]

    const mySteps = [...steps, {
      content: <div>
        <p>You're all done! Enjoy using Coindash!</p>
        <div className='actions'>
          <Button
            raised
            label='Close the Tour'
            primary
            onClick={this.handleDismiss.bind(this)}
          />
        </div>
      </div>
    }].map((s, i)=> Object.assign({}, s, {content: () => {
      this.onStep(i)
      return s.content
    }}))

    return (
      <div>
        Here's it:
        <Tour
          steps={mySteps}
          isOpen={this.state.isOpen}
          onRequestClose={this.handleDismiss.bind(this)} />
      </div>
    )
  }
}

const steps = [
  {
    selector: '.sidenav a[href="/dashboard"]',
    content: <div>
        <h2>Your Dashboard</h2>
        <p>Here you can see how your portfolios behave at a glance, seeing all the information you need when you need it.</p>
      </div>
  },
  {
    selector: '.balance-card',
    content: <div>
      <h2>Balance and Tokens</h2>
      <ul>
        <li>Shows your current portfolio balance</li>
        <li>Lists the various tokens your portfolio is composed of</li>
      </ul>
      <p>In a single view you can check all the balances your portfolio is holding, this aggregated view will consider multiple ethereum (and later exchanges, bitcoin and more) accounts and will display each asset, its current balance and current USD value.
This is a great tool to have a quick snapshot of your holdings and their current market value.</p>
    </div>
  },
  {
    selector: '.benchmark-card',
    content: <div>
      <h2>Benchmark against the market</h2>
      <p>The main graph is the performance graph, displaying the aggregated changes (for each day) your portfolio did. It is benchmarked against the market to answer a question every investor should know the answer to.. ‘How am i doing against the market’
The basic idea is to understand if those various investment you did and various holding your have are under/ over performing the market.
For every single day the CoinDash graph will show how well the portfolio performed against the market on a % change. In the example above it is clearly show that for the most part the portfolio underperformed the market (eth in this case). This investor should have just keep his money in eth instead of investing in other assets.
</p>
    </div>
  },
  {
    selector: '.heighcharts-container',
    content: <div>
      <h2>Portfolio day-by-day balances</h2>
      <p>Keeping tight records on what trades happened in a portfolio is very hard and time consuming. The CoinDash dashboard enables to play back, day by day, the changes in the portfolio’s holdings and indicate the different trades and changes happening along the way.
It a great way to understand better what and how different changes and trades affected the portfolio.
</p>
    </div>
  },
  {
    selector: '.heighcharts-container',
    content: <div>
      <h2>Asset allocation</h2>
      <p>Changing the graph to the allocation tab will show a much clearer view of the different assets comprising the portfolio and how dominant is each and everyone of them.
        It's a great way to quickly see how the portfolio is composed and make necessary changes based on that.</p>
      <p></p>
    </div>
  }
]

function mapStateToProps (state, ownProps) {
  const { user } = state
  return {
    user: user,
    userProps: user && user.properties
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(TourGuide)
