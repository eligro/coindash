import React, { Component, PureComponent } from 'react'
import { connect } from 'react-redux'

import { bindActionCreators } from 'redux'
import { isEtherAddress } from '../../../../../../utils'

import * as userActions from '../../../../../../actions/user.actions'
import * as portfolioActions from '../../../../../../actions/portfolio.actions'
import ActionDone from 'material-ui/svg-icons/action/done'
import TextField from 'react-md/lib/TextFields'

import { Avatar, ToolbarGroup, Toolbar, ToolbarTitle, IconButton } from 'material-ui'
import { Spinner } from 'osi/bits'
import PortfolioAvatar from 'osi/bits/portfolio-avatar'
import CircularProgress from 'material-ui/CircularProgress'

import NavigationMoreVert from 'material-ui/svg-icons/navigation/more-vert'
import EditorModeEdit from 'material-ui/svg-icons/editor/mode-edit'

import './portfolio.css'
import WebFont from 'webfontloader'
import Button from 'react-md/lib/Buttons/Button'
import Card from 'react-md/lib/Cards/Card'
import CardTitle from 'react-md/lib/Cards/CardTitle'
import CardText from 'react-md/lib/Cards/CardText'
import CardActions from 'react-md/lib/Cards/CardActions'
import List from 'react-md/lib/Lists/List'
import ListItem from 'react-md/lib/Lists/ListItem'
import FontIcon from 'react-md/lib/FontIcons'
import Dialog from 'react-md/lib/Dialogs'

import DataTable from 'react-md/lib/DataTables/DataTable'
import TableHeader from 'react-md/lib/DataTables/TableHeader'
import TableBody from 'react-md/lib/DataTables/TableBody'
import TableRow from 'react-md/lib/DataTables/TableRow'
import TableColumn from 'react-md/lib/DataTables/TableColumn'
import TableCardHeader from 'react-md/lib/DataTables/TableCardHeader'

import EthereumIcon from 'osi/bits/svg-icons/network/ethereum'

class Portfolio extends Component {
  constructor (props) {
    super(props)

    this.state = { associateOpen: false }
  }
  componentDidMount () {

  }
  openAssociateAddress () {
    this.setState({associateOpen: true})
  }

  onAssociateAddress (address) {
    const { portfolio, portfolioActions } = this.props
    console.log('associate address:', portfolio, address)
    portfolioActions.associateAddressToPortfolio(portfolio, address)
      .then(_ => this.setState({associateOpen: false}))
  }
  render () {
    const { pid } = this.props.routeParams
    const { portfolio } = this.props
    const { addresses = {} } = (portfolio && portfolio.portfolio) || {}

    if (!portfolio || !portfolio.portfolio) return <Spinner>Loading...</Spinner>
    return (
      <div className={['portfolio', pid].join(' ')}>
        <div className='titles'>
          <PortfolioAvatar portfolio={portfolio} />
          <h2>{portfolio.portfolio.name}</h2>
          <span style={{flex: '1 1 auto'}} />

          <IconButton
            iconStyle={{}}
            style={{}}
          >
            <EditorModeEdit />
          </IconButton>

          <IconButton
            iconStyle={{}}
            style={{}}
          >
            <NavigationMoreVert />
          </IconButton>

        </div>

        {false && <div className='indicators'>
          <StatCard title='Associated accounts' value={Math.floor(Math.random() * 100)} />
          <StatCard title='Assets' value={Math.floor(Math.random() * 100)} />
          <StatCard title='Commulative value' value={Math.floor(Math.random() * 100)} />
          <StatCard title='Followers' value={Math.floor(Math.random() * 100)} />
        </div>}

        <Button raised label='Associated address with portfolio' onClick={e => this.openAssociateAddress()} />

        <h3>Associated addresses</h3>
        <DataTable plain>
          <TableHeader>
            <TableRow>
              <TableColumn colSpan='2'>Addresses</TableColumn>
            </TableRow>
          </TableHeader>
          <TableBody>
            {Object.keys(addresses).map(k => {
              return (
                <TableRow key={k}>
                  <TableColumn><EthereumIcon size={28} /></TableColumn>
                  <TableColumn>{addresses[k]}</TableColumn>
                </TableRow>
              )
            })}
          </TableBody>
        </DataTable>

        <ModalDialogExamples
          onSubmit={address => this.onAssociateAddress(address)}
          onClose={e => this.setState({associateOpen: false})}
          isOpen={this.state.associateOpen} />
      </div>
    )
  }
}

class ModalDialogExamples extends PureComponent {
  constructor (props) {
    super(props)

    this.state = {
      isAddress: false,
      error: false
    }
  }

  addressUpdate () {
    const address = this.refs.address.getField().value
    const isAddress = isEtherAddress(address)
    let { error } = this.state

    if ((!isAddress && this.state.isAddress) || (isAddress && !this.state.isAddress)) {
      this.setState({isAddress, error: isAddress ? false : error})
    }
  }

  onSubmit (e) {
    const address = this.refs.address.getField().value
    const { isAddress } = this.state

    e.preventDefault()

    if (isAddress) {
      this.props.onSubmit(address)
    } else {
      this.setState({error: {
        address,
        isAddress
      }})
    }
  }
  render () {
    const { isOpen, onClose } = this.props
    return (
      <Dialog
        id='associate-address'
        visible={isOpen}
        title='Associate address with portfolio'
        onHide={onClose}
        aria-labelledby='Associate account...'
        component='div'
        closeOnEsc
        actions={[{
          onClick: onClose,
          primary: !this.state.isAddress,
          label: 'Cancel'
        }, {
          onClick: e => this.onSubmit(e),
          primary: true,
          disabled: !this.state.isAddress,
          label: 'Submit'
        }]}
       >

        <p>Enter a valid Ethereum address:</p>
        <form onSubmit={e => this.onSubmit(e)} className='address'>
          <TextField
            id='address'
            ref='address'
            label='Account address'
            type='text'
            error={this.state.error && !this.state.error.isAddress}
            errorText='Value is not a valid ethereum address'
            helpText='e.g. 0x71CF9f77F1...'
            onChange={e => this.addressUpdate(e)}
            rightIcon={this.state.isAddress ? <ActionDone size={28} /> : <CircularProgress size={28} />}
            className='md-cell md-cell--bottom' />
        </form>

      </Dialog>
    )
  }
}

const degree = '\u00B0'
WebFont.load({
  custom: {
    families: ['WeatherIcons'],
    urls: ['https://cdnjs.cloudflare.com/ajax/libs/weather-icons/2.0.9/css/weather-icons.min.css']
  }
})

class StatCard extends Component {
  render () {
    return (
      <Card className='indicator-card'>
        <CardTitle title={this.props.title} />
        <CardText className='weather-block'>
          <h2 className='md-display-2 display-override'>{this.props.value}</h2>
        </CardText>
        {false && <CardActions className='md-divider-border md-divider-border--top'>
          <Button flat label='Full Report' />
        </CardActions>}
      </Card>
    )
  }
}

function mapStateToProps (state, ownProps) {
  const { pid } = ownProps.routeParams
  const { portfolios = [] } = state.portfolio
  return {
    user: state.user,
    portfolio: portfolios.find(e => e.portfolio.pid === pid)
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch),
    portfolioActions: bindActionCreators(portfolioActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(Portfolio)
