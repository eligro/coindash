import React, { Component } from 'react'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import * as portfolioActions from '../../../../../actions/portfolio.actions'
import * as balancesActions from '../../../../../actions/balances.actions'

import Paper from 'material-ui/Paper'

import './portfolio-management.css'

class Wrap extends Component {
  constructor (props) {
    super(props)

    this.state = { }
  }
  componentDidMount (props) {
    this.fetchRelevantContent(props)
  }
  componentWillReceiveProps (nextProps) {
    this.fetchRelevantContent(nextProps)
  }

  fetchRelevantContent (props) {
    const { user, portfolio, balances, userPortfolios, portfolioActions, balancesActions } = props || {}
    if (user && user.profile) {
      if (!portfolio || (!userPortfolios.length && (!portfolio.userPortfoliosFetching || portfolio.hasUserPortfolios))) {
        portfolioActions.loadUserPortfolios(user.profile.uid)
      }

      const bKeys = Object.keys(balances || {})
      if (userPortfolios && (!bKeys || !bKeys.length)) {
        userPortfolios.map(pf => {
          const balance = balances && balances[pf.portfolio.pid]
          const { lastBalances } = pf.portfolio
          const { updatedOn, fetching, started, completed } = balance || {}
          if (lastBalances && !fetching && (!balance || updatedOn < lastBalances) && (!started || (started && completed))) {
            balancesActions.fetchBalances(pf.portfolio.pid)
          }
        })
      }
    }

    if (!portfolio || portfolio.userPortfoliosFetching) return null
    if (user && user.profile) {
      if (!portfolio || (!userPortfolios || !userPortfolios.length)) {
        if (!portfolio.userPortfolios.length && portfolio.hasUserPortfolios) {
          portfolioActions.loadUserPortfolios(user.profile.uid)
        }
      }
    } else {
    }
  }

  render () {
    const Children = () => this.props.children
    return (
      <Paper className='pm-wrap' zDepth={1}>
        <Children />
      </Paper>
    )
  }
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    portfolio: state.portfolio,
    balances: state.balances && state.balances.byPid,
    userPortfolios: state.portfolio && state.portfolio.portfolios && state.portfolio.userPortfolios && state.portfolio.portfolios
      .filter(pf => state.portfolio.userPortfolios.indexOf(pf.portfolio.pid) !== -1),
    hasUserPortfolios: state.portfolio.hasUserPortfolios
  }
}

function mapDispatchToProps (dispatch) {
  return {
    portfolioActions: bindActionCreators(portfolioActions, dispatch),
    balancesActions: bindActionCreators(balancesActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(Wrap)
