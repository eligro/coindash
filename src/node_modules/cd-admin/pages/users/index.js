import React, { Component } from 'react'
import { connect } from 'react-redux'

import * as User from 'osi/user'
import Avatar from 'material-ui/Avatar'
import ActionFace from 'material-ui/svg-icons/action/face'
import ActionAutorenew from 'material-ui/svg-icons/action/autorenew'

import {
  Table,
  TableBody,
  TableHeader,
  TableHeaderColumn,
  TableRow,
  TableRowColumn
} from 'material-ui/Table'

import { Toolbar, ToolbarGroup, ToolbarSeparator, ToolbarTitle } from 'material-ui/Toolbar'
import IconButton from 'material-ui/IconButton'

import Dialog from 'material-ui/Dialog'
import FlatButton from 'material-ui/FlatButton'
import RaisedButton from 'material-ui/RaisedButton'
import Toggle from 'material-ui/Toggle'

class Users extends Component {
  constructor (props) {
    super(props)

    this.state = {
      loadedUsers: false,
      admin: {
        modalOpen: false,
        confirmed: false,
        acknowledge: false
      },
      users: []
    }
  }
  componentDidMount () {
    this.loadUsers()
  }

  loadUsers () {
    User.getUsers()
      .then(users => {
        this.setState({ users })
        if (this.props.gmode) {
          // Check user admin status
          let proms = users.map(u => {
            return User.isAdmin(u.uid)
              .then(isAdmin => {
                return ({...u, isAdmin})
              })
          })
          Promise.all(proms)
            .then(res => {
              this.setState({
                users: res
              })
            })
        }
      })
  }

  handleOpen () {
    this.setState({admin: {...this.state.admin, modalOpen: true}})
  }

  handleClose (refreshRequire) {
    this.setState({admin: {modalOpen: false}})
    if (refreshRequire) this.loadUsers()
  }

  handleConfirm () {
    const { name, uid, email, isAdmin } = this.state.admin.user
    if (!isAdmin) { // Promote
      User.makeAdmin({name, uid, email})
        .then(res => this.handleClose(true))
        .catch(err => {
          console.log('error with makeAdmin', err)
        })
    } else { // Demote
      User.unmakeAdmin(uid)
        .then(res => this.handleClose(true))
        .catch(err => {
          console.log('error with unmakeAdmin', err)
        })
    }
  }
  onRequestClose (buttonClicked) {
    this.setState({admin: {modalOpen: false}})
  }
  render () {
    const actions = [
      <FlatButton
        label='Cancel'
        onTouchTap={this.handleClose.bind(this)}
      />,
      <RaisedButton
        label='Confirm'
        primary
        disabled={!this.state.admin.acknowledge}
        onTouchTap={this.handleConfirm.bind(this)}
      />
    ]

    return (
      <div>
        <Toolbar>
          <ToolbarGroup>
            <ToolbarTitle text='Users' />
          </ToolbarGroup>
          <ToolbarGroup>
            <IconButton onClick={e => this.loadUsers()}>
              <ActionAutorenew />
            </IconButton>
          </ToolbarGroup>
        </Toolbar>
        {this.state.users && (
          <UsersTable
            toggleAdmin={this.toggleAdmin.bind(this)}
            gmode={this.props.gmode}
            users={this.state.users} />
        )}

        {this.state.admin.modalOpen && (
          <Dialog
            title={`Confirm Administration Change`}
            actions={actions}
            onRequestClose={this.onRequestClose.bind(this)}
            open={this.state.admin.modalOpen}
          >
            <h2>{this.state.admin.user.email}</h2>
            <p>
              You are about to <strong>{this.state.admin.user.isAdmin ? 'demote' : 'promote'}</strong> the user {this.state.admin.user.name} ({this.state.admin.user.email}) ID No' <code>{this.state.admin.user.uid}</code>.
            </p>
            <p>
              Do you understand that this user will...
            </p>
            <h3>{!this.state.admin.user.isAdmin ? 'Become an admin and will gain access to the entire system' : 'Lose administration privileges'}?</h3>
            <p />
            <Toggle
              label='Yes, I understand ;)'
              labelPosition='right'
              defaultToggled={this.state.admin.acknowledge}
              onToggle={(e, active) => this.setState({admin: {...this.state.admin, acknowledge: active}})}
            />
          </Dialog>
        )}
      </div>
    )
  }

  toggleAdmin (e, active, uid) {
    const user = this.state.users.find(u => u.uid === uid)
    this.setState({admin: {...this.state.admin, modalOpen: true, user}})
  }
}

class UsersTable extends Component {
  render () {
    return (
      <Table
        adjustForCheckbox={false}
        selectable={false}>
        <TableHeader
          displayRowCheckbox={false}
          >
          <TableRow>
            <TableHeaderColumn style={{width: 56}}>&nbsp;</TableHeaderColumn>
            <TableHeaderColumn>ID</TableHeaderColumn>
            <TableHeaderColumn>Name</TableHeaderColumn>
            <TableHeaderColumn>Email</TableHeaderColumn>
            <TableHeaderColumn>Status</TableHeaderColumn>
            {this.props.gmode && (
              <TableHeaderColumn>Admin</TableHeaderColumn>
            )}
          </TableRow>
        </TableHeader>
        <TableBody
          displayRowCheckbox={false}
          showRowHover>
          {this.props.users.map(user => (
            <TableRow key={user.uid}>
              <TableRowColumn style={{width: 56}}>
                {user.photoUrl ? <Avatar src={user.photoUrl} size={28} /> : <ActionFace />}
              </TableRowColumn>
              <TableRowColumn>{user.uid}</TableRowColumn>
              <TableRowColumn>{user.name}</TableRowColumn>
              <TableRowColumn>{user.email}</TableRowColumn>
              <TableRowColumn>{user.emailVerified ? 'Verified' : 'Not Verified'}</TableRowColumn>
              {this.props.gmode && (
                <TableRowColumn>
                  {user.isAdmin !== 'GMODE' && (
                    <Toggle
                      toggled={user.isAdmin}
                      onToggle={(e, active) => this.props.toggleAdmin(e, active, user.uid)}
                    />
                  )}
                </TableRowColumn>
              )}
            </TableRow>
          ))}

        </TableBody>
      </Table>
    )
  }
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    isAdmin: !!state.admin.active,
    gmode: state.admin.gmode
  }
}

function mapDispatchToProps (dispatch) {
  return {}
}

export default connect(mapStateToProps, mapDispatchToProps)(Users)
