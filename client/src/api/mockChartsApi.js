import delay from './delay';

const btcData = [[1448928000000, 1000], [1451606400000, 1203.34], [1454284800000, 1036.21], [1456790400000, 1203.34], [1459468800000, 1158.77], [1462060800000, 1259.05], [1464739200000, 1501.39], [1467331200000, 1880.22], [1470009600000, 1688.02],	[1472688000000, 1596.10],	[1475280000000, 1713.09],	[1477958400000, 2027.86]];
const portfolioData = [[1448928000000, 1000], [1451606400000, 1200], [1454284800000, 950], [1456790400000, 1250], [1459468800000, 1050], [1462060800000, 1039.5], [1464739200000, 1237.5], [1467331200000, 1287], [1470009600000, 1485], [1472688000000, 1039.5],	[1475280000000, 1089],	[1477958400000, 1237]];

const betaData = [[1451606400000, 14], [1454284800000, 14], [1456790400000, 15], [1459468800000, 15.50], [1462060800000, 15.60], [1464739200000, 16], [1467331200000, 15], [1470009600000, 14],	[1472688000000, 15],	[1475280000000, 15], [1477958400000, 15]];
const alphaData = [[1451606400000, -0.33], [1454284800000, -6.94], [1456790400000, -3], [1459468800000, -12.30], [1462060800000, -12.60], [1464739200000, -10.52], [1467331200000, -8], [1470009600000, -8.5], [1472688000000, -8.8],	[1475280000000, -2.57],	[1477958400000, -4.74]];


class ChartAPI {
    static getChart() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve(Object.assign({}, {btcData, portfolioData}));
            }, delay);
        });
    }

    static getRiskChart() {
        return new Promise ((resolve, reject) => {
            setTimeout(() => {
                resolve(Object.assign({}, {betaData, alphaData}));
            }, delay)
        })
    }
}

export default ChartAPI;