import React, { Component } from 'react'
import { connect } from 'react-redux'
import { browserHistory, Link } from 'react-router'

import { bindActionCreators } from 'redux'

import * as userActions from '../../../../../../actions/user.actions'
import * as portfolioActions from '../../../../../../actions/portfolio.actions'

// import RaisedButton from 'material-ui/RaisedButton'
import Button from 'react-md/lib/Buttons/Button'
import {Card, CardHeader, CardText} from 'material-ui/Card'
import Dialog from 'material-ui/Dialog'
import TextField from 'material-ui/TextField'
import ActionAnnouncement from 'material-ui/svg-icons/action/announcement'
import PageContent from 'osi/components/portman/parts/page-content'
import Paper from 'react-md/lib/Papers'
import Checkbox from 'material-ui/Checkbox'

import { ToolbarGroup, Toolbar, ToolbarTitle, IconButton } from 'material-ui'
import NavigationMoreVert from 'material-ui/svg-icons/navigation/more-vert'

import NavigationArrowBack from 'material-ui/svg-icons/navigation/arrow-back'
import MessageBlock from 'osi/components/portman/parts/message-block'
import CircularProgress from 'material-ui/CircularProgress'

import Brand from 'osi/bits/brand'
import * as Coupons from 'osi/user/coupons'
import CopyToClipboard from 'react-copy-to-clipboard';

import './presale.css'

const RaisedButton = (props) => <Button raised {...props}>{props.children}</Button>
const FlatButton = (props) => <Button flat {...props}>{props.children}</Button>

class PresalePage extends Component {
  constructor (props) {
    super(props)

    this.state = {
      busy: false,
      insertCouponError: false,
      hasCoupon: false,
      copies: ''
    }
  }

  componentWillUpdate (nextProps, nextState) {
    console.log('================================================ we ready.')
    if (nextProps && nextProps.user && nextProps.user.profile && !nextState.busy && !nextState.couponChecked) {
      this.checkForUserCoupon(nextProps)
    }
  }

  componentWillMount () {
    this.checkForUserCoupon(this.props)
  }

  checkForUserCoupon (props = this.props) {
    this.setState({busy: true}, dp => {
      Coupons.userHasCoupon(props.user.profile.uid)
        .then(res => {
          this.setState({
            busy: false,
            couponChecked: true,
            hasCoupon: res
          }, c => {
            console.log('stated?', c)
          })
          console.log('does user has coupon?', res)
        })
    })
  }

  attemptCoupon (e) {
    const coupon = this.couponValue
    e.preventDefault()

    console.log('do coupon!', coupon)
    console.log('do user!', this.props.user)
    Coupons.isCouponValid(coupon)
      .then(isValid => {
        console.log('is coupon valid?', isValid)
        if (isValid) {
          Coupons.useCoupon(coupon, this.props.user.profile.uid)
            .then(data => {
              console.log('data for coupon:', data)
              this.checkForUserCoupon()
            })
            .catch(err => {
              this.setState({insertCouponError: { text: 'Coupon code invalid' } })
            })
        }
      })
      .catch(err => {
        this.setState({insertCouponError: { text: err.code } })
      })
  }

  addCoupon (e) {
    e.preventDefault()

    Coupons.addCoupon(this.addCouponValue)
      .then(res => {
        console.log('is coupon valid?', res)
      })
  }

  getCouponValue () {
    console.log('getCouponValue')
    Coupons.getCouponValue()
      .then(res => {
        console.log('my coupon value is:', res)
      })
  }

  onCouponValueChanged (e, v) {
    this.couponValue = v
  }

  genCoupons () {
    this.setState({busy: true})
    const rf = _ => Math.floor(Math.random() * 100000000000).toString(35)
    const df = _ => `${rf()}-${rf()}-${rf()}-${rf()}`
    let coupons = []
    for (let i = 0; i < 100; ++i) {
      coupons.push(df())
    }

    const proms = coupons.map(c => Coupons.addCoupon(c)
      .then(res => {
        console.log('is coupon valid?', res)
      }))

    Promise.all(proms)
      .then(_ => {
        console.log('coupons added:', proms)
      })

    console.log('coupons:', coupons)
  }

  render () {
    const alignToStart = { alignItems: 'flex-start' }
    const whiteIcon = { color: '#FFF' }
    const checks = {}

    console.log('here user:', this.props.user)
    // console.info('portfoliosList:', PortfoliosList)

    let enterCoupon = (
      <Card className='insert-coupon'>
        <div className='titles'>
          <Brand style={{height: 50}} color='#FFF' />
          <h5>Community Presale</h5>
        </div>
        <div className='user-input'>
          <h2>Input coupon code</h2>
          <h6>to reveal the smart contract address</h6>

          <TextField
            fullWidth
            errorText={this.state.insertCouponError && this.state.insertCouponError.text}
            id='coupon-input'
            floatingLabelText='Coupon code in your mail'
            onChange={(e, v) => this.onCouponValueChanged(e, v)} />

          <div className='actions'>
            <RaisedButton
              primary onClick={e => this.attemptCoupon(e)} type='submit' label='Next' />
          </div>

        </div>
        <div className='promo'>
          <p>
            Don't have an active portfolio yet? <Link to='portfolios'>Create one now</Link>
          </p>
        </div>

      </Card>
      )

    let Agreements = ({onSubmit, ...props}) => <PresaleCard className='agreements' content={<div className='tnc-content'>
      <div className='scroll'>
        <h3>Terms and Conditions</h3>
        <div className='tohen'>
          {TNCs}
        </div>
      </div>
      <form onSubmit={e => (e.preventDefault() && false) || this.setState({revealCode: true})}>
        <div className='checks'>
          <Checkbox
            autoFocus
            checked={this.state.tncChecked}
            onCheck={(e, v) => this.setState({tncChecked: v})}
            label='I have read and agree to the Terms and Conditions above'
          />
          <Checkbox
            checked={this.state.ilusChecked}
            onCheck={(e, v) => this.setState({ilusChecked: v})}
            label='I am not a US/Israel citizen'
          />
        </div>
        <div className='actions'>
          <RaisedButton
            primary
            disabled={!this.state.tncChecked || !this.state.ilusChecked}
            onClick={e => this.setState({revealCode: true})} type='submit' label='Reveal Address' />
        </div>
      </form>
    </div>} />

    let Address = props => <PresaleCard className='address'
      title='Copy the address to invest'
      content={<div className='address-content'>
        <TextField
          fullWidth
          value={this.state.hasCoupon}
          id='address-input'
          floatingLabelText='CoinDash Token Sale Smart Contract Address' />

        <div className='actions'>
          <FlatButton href='mailto:contact@coindash.io' label='Invest Tutorial' />
          {this.state.copied ? <span className='copied'>Address copied</span> : null}
          <CopyToClipboard text={this.state.hasCoupon}
            onCopy={() => this.setState({copied: true})}>
            <RaisedButton label='Copy'
              backgroundColor='#4845d3'
              labelColor='#fff' />
          </CopyToClipboard>
        </div>
      </div>} />

    let redeemed = props =>
      <Card className='coupon-reedemed'>
        <div className='titles'>
          <Brand style={{height: 50}} color='#FFF' />
          <h5>Community Presale</h5>
        </div>
        <div className='user-input'>
          <h2>Copy the address to invest</h2>
          <h6>to reveal the smart contract address</h6>
          <TextField
            errorText={props.error && props.error.text}
            id='coupon-input'
            floatingLabelText='Enter Coupon'
            onChange={(e, v) => props.onCouponValueChanged(e, v)} />
          <div className='actions'>
            <div className='lll' />
            <RaisedButton primary onClick={e => props.attemptCoupon(e)} type='submit' label='Next' />
          </div>
        </div>

        <h3>Coupon Reedemed!</h3>
        <p>You have successfully redeemed your coupon for the ICO presale.</p>
        <br />
        <p>T&Cs here...</p>

        <p><label><input type='checkbox' /> I agree to terms & conditions</label></p>
        <p><label><input type='checkbox' /> I am not an Israeli or a US citizen</label></p>
        <RaisedButton onClick={e => props.setState({revealCode: !props.revealCode})} primary label='I Agree and Reveal ICO Address' />

        <p>ICO Address: <code>{props.revealCode ? props.hasCoupon : 'Press "Reveal ICO Address below"'}</code></p>
      </Card>

    let HasTNCs = () => this.state.revealCode ? <Address /> : <Agreements />
    let EnterOrRedeemed = () => this.state.hasCoupon ? <HasTNCs /> : enterCoupon

    return (
      <div className='presale'>

        <PageContent>
          <multi>
            <EnterOrRedeemed />
            {/* {this.state.busy ?  <CircularProgress /> : <EnterOrRedeemed />} */}
          </multi>
          {false && <primary>
            <hr />
            <hr />

            <h4>Admin</h4>

            <form className='coupons' onSubmit={e => this.addCoupon(e)}>
              <legend>Add Coupon Here</legend>
              <TextField id='coupon-input' floatingLabelText='Enter Coupon' onChange={(e, v) => this.addCouponValue = v} />
              <RaisedButton onClick={e => this.addCoupon(e)} type='submit' label='Add Coupon' />
            </form>

          </primary>}
          <secondary>
            <RaisedButton fullwidth onClick={e => this.genCoupons()} primary label='Generate 100 Coupons' />
          </secondary>
        </PageContent>

      </div>
    )
  }
}

const PresaleCard = ({title, subtitle, content, promo, className, ...props}) =>
  <Card className={['insert-coupon', className].join(' ')}>
    <div className='titles'>
      <Brand style={{height: 50}} color='#FFF' />
      <h5>Community Presale</h5>
    </div>
    <div className='user-input'>
      {!!title && <h2>{title}</h2>}
      {!!subtitle && <h6>{subtitle}</h6>}

      {content}

    </div>
    {!!promo && <div className='promo'>
      {promo}
    </div>}
  </Card>

const TNCs = `Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.`

function mapStateToProps (state, ownProps) {
  return {
    user: state.user
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(PresalePage)
