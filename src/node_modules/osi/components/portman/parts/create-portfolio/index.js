import React, { Component } from 'react'
import Button from 'react-md/lib/Buttons/Button'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import { recordEvent } from 'osi/analytics'

import Dialog from 'material-ui/Dialog'
import TextField from 'material-ui/TextField'

import * as userActions from '../../../../../../actions/user.actions'
import * as portfolioActions from '../../../../../../actions/portfolio.actions'



const RaisedButton = (props) => <Button raised {...props}>{props.children}</Button>

class CreatePortfolio extends Component {
  constructor (props) {
    super(props)

    this.state = {
      createPortfolioOpen: false
    }
  }

  createPortfolio () {
    this.setState({createPortfolioOpen: true})
  }

  onPortfolioCreated (dat) {
    // console.info('what is dat?', dat)
    this.props.portfolioActions.loadUserPortfolios(this.props.user.profile.uid)
      .then(res => {
        // console.log('what is res?', res)

        this.setState({createPortfolioOpen: false})
        if (this.props.onCreate) {
          this.props.onCreate(dat)
        }
      })
  }

  render () {
    return (
      <span className='create-portfolio'>
        <RaisedButton label={this.props.label || 'Create new Portfolio'} primary={this.props.primary} onClick={e => this.createPortfolio()} />

        <ConnectedCreatePortfolioDialog
          onCancel={e => this.setState({createPortfolioOpen: false})}
          onCreate={pf => this.onPortfolioCreated(pf)}
          isOpen={this.state.createPortfolioOpen} />
      </span>
    )
  }
}

class CreatePortfolioDialog extends Component {
  constructor (props) {
    super(props)

    this.state = {
      allowSubmit: false
    }
  }

  onSubmit (e) {
    let start = Date.now()
    const { uid } = this.props.user.profile
    const name = this.refs.name.getValue()
    const description = this.refs.description.getValue()

    const { onCreate = () => {} } = this.props
    e.preventDefault()

    this.props.portfolioActions.newPortfolio({name, description, uid})
      .then(pmResult => {
        onCreate(pmResult)
      })

    let end = Date.now()
    let duration = end - start
    const portfolioEvent = {
      name: name,
      description: description,
      uid: uid,
      duration: `${duration} ms`,
      keen: {
        timestamp: new Date().toISOString()
      }
    }
    recordEvent('create portfolio', portfolioEvent, function(err, res){
      if (err) {
        console.log('Portolio Creation Error')
      }
      else {
        console.log('Portfolio Created!')
      }
    })
  }
  valuesUpdated (e) {
    const name = this.refs.name.getValue()
    const { allowSubmit } = this.state
    if ((allowSubmit && !name) || (!allowSubmit && name)) {
      this.setState({allowSubmit: !!name})
    }
  }
  render () {
    const { allowSubmit } = this.state
    return (
      <Dialog
        title='Create Portfolio'
        onRequestClose={e => this.props.onCancel(e)}
        actions={([
          <RaisedButton
            label='Cancel'
            primary={!allowSubmit}
            onClick={e => this.props.onCancel(e)}
          />,
          <RaisedButton
            label='Submit'
            primary
            disabled={!allowSubmit}
            onClick={e => this.onSubmit(e)}
          />
        ])}
        open={this.props.isOpen}
      >
        <form onSubmit={e => this.onSubmit(e)}>
          <div>
            <TextField
              ref='name'
              floatingLabelText='Portfolio name'
              onChange={e => this.valuesUpdated()}
            />
          </div>
          <div>
            <TextField
              ref='description'
              multiLine
              floatingLabelText='Description'
              hintText='Give your portfolio a description'
            />
          </div>
        </form>
      </Dialog>
    )
  }
}

const ConnectedCreatePortfolioDialog = connect(mapStateToProps, mapDispatchToProps)(CreatePortfolioDialog)

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    portfolios: state.portfolio.portfolios
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch),
    portfolioActions: bindActionCreators(portfolioActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(CreatePortfolio)
