import React, { Component } from 'react'
import { connect } from 'react-redux'
import { browserHistory, Link } from 'react-router'
import _ from 'lodash'
import { bindActionCreators } from 'redux'

import * as userActions from '../../../../../../actions/user.actions'
import * as portfolioActions from '../../../../../../actions/portfolio.actions'

// import RaisedButton from 'material-ui/RaisedButton'
import Button from 'react-md/lib/Buttons/Button'
import {Card, CardHeader, CardText} from 'material-ui/Card'
import Dialog from 'material-ui/Dialog'
import TextField from 'material-ui/TextField'
import ActionAnnouncement from 'material-ui/svg-icons/action/announcement'
import PageContent from 'osi/components/portman/parts/page-content'
import Paper from 'react-md/lib/Papers'
import Checkbox from 'material-ui/Checkbox'

import { ToolbarGroup, Toolbar, ToolbarTitle, IconButton } from 'material-ui'
import NavigationMoreVert from 'material-ui/svg-icons/navigation/more-vert'
import LinearProgress from 'material-ui/LinearProgress'

import NavigationArrowBack from 'material-ui/svg-icons/navigation/arrow-back'
import MessageBlock from 'osi/components/portman/parts/message-block'
import CircularProgress from 'material-ui/CircularProgress'

import Brand from 'osi/bits/brand'
import * as Coupons from 'osi/user/coupons'
import CopyToClipboard from 'react-copy-to-clipboard'
import { recordEvent } from 'osi/analytics'

import './presale.css'

const RaisedButton = (props) => <Button raised {...props}>{props.children}</Button>
const FlatButton = (props) => <Button flat {...props}>{props.children}</Button>

class PresalePage extends Component {
  constructor (props) {
    super(props)

    this.state = {
      busy: false,
      insertCouponError: false,
      hasCoupon: false,
      copies: ''
    }
  }

  componentWillUpdate (nextProps, nextState) {
    if (nextProps && nextProps.user && nextProps.user.profile && !nextState.busy && !nextState.couponChecked) {
      this.checkForUserCoupon(nextProps)
    }
  }

  componentWillMount () {
    const nextProps = this.props
    const nextState = this.state
    if (nextProps && nextProps.user && nextProps.user.profile && !nextState.busy && !nextState.couponChecked) {
      this.checkForUserCoupon(this.props)
    }

    Coupons.getTNCs().then(tncs => this.setState({tncsText: tncs}))
  }

  checkForUserCoupon (props = this.props) {
    this.setState({busy: true}, dp => {
      Coupons.userHasCoupon(props.user.profile.uid)
        .then(res => {
          this.setState({
            busy: false,
            couponChecked: true,
            hasCoupon: res
          })
        })
        .catch(err => {
          this.setState({busy: false, couponChecked: true})
        })
    })
  }

  attemptCoupon (e) {
    const coupon = this.state.couponValue
    e.preventDefault()
    const { email: email, profile: { uid: uid } } = this.props.user
    debugger

    this.setState({busy: true})
    const clearBusy = _.delay((props = {}) => {
      this.checkForUserCoupon()
      this.setState(Object.assign({busy: false}, props))
    }, 3200)
    Coupons.isCouponValid(coupon)
      .then(isValid => {
        if (isValid) {
          Coupons.useCoupon(coupon, this.props.user.profile.uid)
            .then(data => {
              recordEvent('used coupon', { uid: uid, email: email, coupon: coupon, data: data, keen: { timestamp: new Date().toISOString() } })
              clearBusy
            })
            .catch(err => {
              recordEvent('denied coupon', { uid: uid, email: email, coupon: coupon, error: err, keen: { timestamp: new Date().toISOString() } })
              this.setState({ insertCouponError: { text: 'Coupon code denied' } })
              clearBusy
            })
        }
      })
      .catch(err => {
        recordEvent('invalid coupon', { uid: uid, email: email, coupon: coupon, error: err, keen: { timestamp: new Date().toISOString() } })
        this.setState({ insertCouponError: { text: err.code } })
      })
  }

  // // TODO - omit if no longer in use
  // addCoupon (e) {
  //   e.preventDefault()
  //   const { email: email, profile: { uid: uid } } = this.props.user

  //   Coupons.addCoupon(this.state.couponValue)
  //     .then(res => {
  //       recordEvent('added coupon', { uid: uid, email: email, result: res, keen: { timestamp: new Date().toISOString() } })
  //       console.log('is coupon valid?', res)
  //     })
  // }

  onCouponValueChanged (e, v) {
    this.setState({couponValue: v})
  }

  genCoupons () {
    this.setState({busy: true})
    const rf = _ => Math.floor(Math.random() * 100000000000).toString(35)
    const df = _ => `${rf()}-${rf()}-${rf()}-${rf()}`
    let coupons = []
    for (let i = 0; i < 100; ++i) {
      coupons.push(df())
    }

    const proms = coupons.map(c => Coupons.addCoupon(c)
      .then(res => {
        console.log('is coupon valid?', res)
      }))

    Promise.all(proms)
      .then(_ => {
        console.log('coupons added:', proms)
      })
  }

  onRevealAddress () {
    const { email: email, profile: { uid: uid } } = this.props.user
    recordEvent('revealed address', { uid: uid, email: email, keen: { timestamp: new Date().toISOString() } })
    this.setState({revealCode: true})
  }

  render () {
    return (
      <div className='presale'>
        <PageContent>
          <header>
            {/* Placeholder cause children...  */}
          </header>
          <multi>
            {this.state.hasCoupon ? (
              this.state.revealCode ? <Address
                copied={this.state.copied}
                hasCoupon={this.state.hasCoupon}
                onCopy={() => this.setState({copied: true})}
               /> : <Agreements
                 tncs={this.state.tncsText}
                 tncChecked={this.state.tncChecked}
                 ilusChecked={this.state.ilusChecked}
                 onCheck={(d, v) => this.setState({[d]: v})}
                 onSubmit={() => this.onRevealAddress() }
               />
            ) : <InsertCoupon
              busy={this.state.busy}
              error={this.state.insertCouponError && this.state.insertCouponError.text}
              onCouponValueChanged={this.onCouponValueChanged.bind(this)}
              couponValue={this.state.couponValue}
              attemptCoupon={this.attemptCoupon.bind(this)} />}
            {/* {this.state.busy ?  <CircularProgress /> : <EnterOrRedeemed />} */}
          </multi>
        </PageContent>

      </div>
    )
  }
}

const PresaleCard = ({title, subtitle, content, promo, className, busy, ...props}) =>
  <Card className={['insert-coupon', className, busy ? 'busy' : ''].join(' ')}>
    <LinearProgress
      className='busy-indicator'
      mode='indeterminate'
      color='#FF1654'
      style={{background: 'transparent'}} />
    <div className='titles'>
      <Brand style={{height: 50}} color='#FFF' />
      <h5>Community Whitelist</h5>
    </div>
    <div className='user-input'>
      {!!title && <h2>{title}</h2>}
      {!!subtitle && <h6>{subtitle}</h6>}

      {content}

    </div>
    {!!promo && <div className='promo'>
      {promo}
    </div>}
  </Card>

const InsertCoupon = ({onSubmit, attemptCoupon, onCouponValueChanged, couponValue, busy, error, ...props}) => <PresaleCard className='insert'
  busy={busy}
  title='Input coupon code'
  subtitle='to reveal the smart contract address'
  content={<div className='insert-content'>
    <form onSubmit={e => (e.preventDefault() && false) || attemptCoupon()}>
      <TextField
        fullWidth
        errorText={!busy && error}
        id='coupon-input'
        value={couponValue}
        floatingLabelText='Coupon code in your mail'
        onChange={(e, v) => onCouponValueChanged(e, v)} />

      <div className='actions'>
        <RaisedButton
          disabled={!couponValue}
          primary onClick={e => attemptCoupon(e)} type='submit' label='Next' />
      </div>
    </form>
  </div>}
  promo={<p>
    Don't have an active portfolio yet? <Link to='portfolios'>Create one now</Link>
  </p>}
/>

const Agreements = ({onSubmit, tncChecked = false, ilusChecked = false, onCheck, tncs, ...props}) => <PresaleCard className='agreements' content={<div className='tnc-content'>
  <div className='scroll'>
    <h3>Terms and Conditions</h3>
    <div className='tohen'>
      {tncs}
    </div>
  </div>
  <form onSubmit={e => (e.preventDefault() && false) || onSubmit()}>
    <div className='checks'>
      <Checkbox
        autoFocus
        checked={tncChecked}
        onCheck={(e, v) => onCheck('tncChecked', v)}
        label='I have read and agree to the Terms and Conditions above'
      />
      <Checkbox
        checked={ilusChecked}
        onCheck={(e, v) => onCheck('ilusChecked', v)}
        label='I am not a US/Israel citizen'
      />
    </div>
    <div className='actions'>
      <RaisedButton
        primary
        disabled={!tncChecked || !ilusChecked}
        onClick={e => onSubmit()} type='submit' label='Reveal Address' />
    </div>
  </form>
</div>} />

let Address = ({hasCoupon, onCopy, copied, ...props}) => <PresaleCard className='address'
  title='Copy the address to invest'
  content={<div className='address-content'>
    <TextField
      fullWidth
      value={hasCoupon}
      id='address-input'
      floatingLabelText='CoinDash Token Sale Smart Contract Address' />

    <div className='actions'>
      <FlatButton target='_blank' href='https://coindash.io/wp-content/uploads/TokenSale-MyEtherWallet.pdf' label='Invest Tutorial' />
      {copied ? <span className='copied'>Address copied</span> : null}
      <CopyToClipboard text={hasCoupon}
        onCopy={() => onCopy()}>
        <RaisedButton label='Copy' primary />
      </CopyToClipboard>
    </div>
  </div>} />

const TNCs = `Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.`

function mapStateToProps (state, ownProps) {
  return {
    user: state.user
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(PresalePage)
