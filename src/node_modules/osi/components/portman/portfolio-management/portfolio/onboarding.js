import React from 'react'
import MessageBlock from 'osi/components/portman/parts/message-block'
import Button from 'react-md/lib/Buttons/Button'
import LinearProgress from 'material-ui/LinearProgress'
import { random } from 'lodash'

import PortfolioSuitecase from 'osi/bits/svg-icons/portfolio-suitecase'

export const FirstCalc = props => (
  <MessageBlock className='first-calc' actions={(
    <Button raised primary onClick={props.doCalc}
      label='Start calculating...' />
  )}>
    <h3>Calculate Portfolio</h3>
    <p>
      Now that you've added your accounts you can start calculating
      the portfolio to receive your portfolio benchmark and analysis.
    </p>
  </MessageBlock>
)

export const AssociateAddresses = props => (
  <MessageBlock className='first-address' actions={(
    <Button raised primary onClick={props.doAssociate}
      label='Add address to account' />
  )}>
    <h3>Associate Addresses</h3>
    <p>
      To begin using Coindash powerful analysis features you need to
      associate one or more Ethereum addresses with your portfolio.
    </p>
  </MessageBlock>
)

const statusSentences = [
  `Compiling blockchain history`,
  `Analyzing transactions`,
  `Reading smart contracts`,
  `Verifying protocol standard`,
  `Comparing historical data`,
  `Patching token information`,
  `Building perforamnce report`,
  `Allocation portfolio values`,
  `Deleting cache`,
  `Preparing content for human ingestion`,
  `Stand by`
]

const statuses = []
const statusAt = (status) => {
  const text = statuses.find(({min, max}) => min <= status && max > status)
  return text.text
}
statusSentences.reduce(({max: acc}, elm, index) => {
  const max = ((100 - acc) / (statusSentences.length - statuses.length))
  const thisOne = random(acc, (acc + max) + random(0, 10))
  const j = {
    min: Math.ceil(acc),
    max: statuses.length < statusSentences.length - 1 ? Math.ceil((thisOne < 100 ? thisOne : 100)) : 100,
    text: elm
  }
  statuses.push(j)
  return j
}, {max: 0})


export const CalculatingPortfolio = ({status, ...props}) => (
  <MessageBlock
    media={<PortfolioSuitecase />}
    className='calculating-msg'>
    <h3>Calculating portfolio...</h3>
    <p>
      Your portfolio is now being calculated, please stand by and do
      not logout and do not close this browser window.
    </p>
    <div className='prgs'>
      <div className='note'>
        {status < 100 && (
          // {status <
          <p>{statusAt(status)}...</p>
        )}
        <p>
          {(status || 0).toFixed(0)}% Complete
        </p>
      </div>
      <div className='elm'>
        <LinearProgress mode='determinate' value={status} style={{backgroundColor: 'rgba(222, 222, 240, 0.6)'}} />
      </div>
    </div>
  </MessageBlock>
)
