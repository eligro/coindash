import React, { Component } from 'react'
import CircularProgress from 'material-ui/CircularProgress'

import AlertDialog from 'osi/components/portman/parts/dialogs/alert-dialog'

class CalculatePortfolio extends Component {
  constructor (props) {
    super(props)

    this.state = {
      alertOpen: false
    }
  }

  startPortfolio () {
    const { portfolio, chartActions, balancesActions, addressList = [] } = this.props
    console.log('starting!', portfolio)
    console.info('addresses:', addressList)

    if (!addressList.length) {
      this.setState({
        alertOpen: true,
        alertTitle: 'No addresses associated',
        alertText: 'Associate addresses with this portfolio to begin calculations'
      })
    } else {
      chartActions.calcPortfolio(portfolio.portfolio.pid, addressList)
      balancesActions.calcBalances(portfolio.portfolio.pid, addressList)
    }
  }

  render () {
    const { portfolio, processProgress, calculationError, process, button, statusElm } = this.props
    const StartButton = props => button
    const Status = props => statusElm || <div></div>
    return (
      <div className='calculate-wrap'>
        {(!process || !process.started || calculationError || !processProgress || !(processProgress > 0 && processProgress < 100)) && (
          <div onClick={e => this.startPortfolio()}>
            <StartButton />
          </div>
        )}
        {(!calculationError && process && process.started && processProgress && (processProgress > 0 && processProgress < 100)) && (
          <Status />
        )}
        {'old stuff' === true /*
          <div className='old-wrap'>
            {(!process || !process.started || calculationError || !processProgress || !(processProgress > 0 && processProgress < 100)) && (
              <IconButton
                iconStyle={{}}
                style={{}}
                onClick={e => this.startPortfolio()}
              >
                <AVPlay />
              </IconButton>
            )}
            {(!calculationError && process && process.started && processProgress && (processProgress > 0 && processProgress < 100)) && (
              <CircularProgress max={100} min={0} mode='determinate' value={processProgress} size={30} />
            )}
          </div>
        ) */}

        <AlertDialog
          onClose={e => this.setState({alertOpen: false})}
          visible={this.state.alertOpen}
          title={this.state.alertTitle}
          >
          <div>{this.state.alertText}</div>
        </AlertDialog>
      </div>
    )
  }
}

export default CalculatePortfolio
