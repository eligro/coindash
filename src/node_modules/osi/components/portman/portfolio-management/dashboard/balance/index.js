import React from 'react'
import colors from 'styleguide/colors'
import { Circle } from 'rc-progress'
import { currencyFormat } from 'osi/config'

import Paper from 'react-md/lib/Papers'

import {List, ListItem} from 'material-ui/List'
import Subheader from 'material-ui/Subheader'

const Balance = (props) => {
  const { balances = {}, onboarding } = props
  const { fetching } = balances

  return (
    <Paper className='balance-card' zDepth={0}>
      {fetching && (
        <span>{onboarding ? 'Onboarding' : ''}Loading...</span>
      )}

      {!fetching && (
        <div>
          <h4>Balance</h4>
          {onboarding && <OnBoarding />}
          {!onboarding && balances.data && balances.data.length && (
            <AssetsList items={balances.data} />
          )}
        </div>
      )}
    </Paper>
  )
}

const OnBoarding = props => (
  <div className='onboarding'>
    <AssetsList details='Create your first crypto portfolio to see your balance and token data here at one glance.'>
      <BalanceItem title='N/A' amount={0} value={0} />
    </AssetsList>
  </div>
)

const noPaddingStyle = { padding: 0 }

const AssetsList = props => {
  const { items, details } = props
  let kids = props.children
  let totalValue = 0

  if (items && items.length) {
    const colKey = key => items.length < colors.length ? items.length - 1 : colors.length - 1
    const cols = key => colors[colKey(key)][key % (colors[colKey(key)].length - 1)]
    totalValue = items.reduce((acc, val) => acc + val.value, 0)

    const rotates = items.map((balance, key) => {
      return key > 0 ? items.filter((item, index) => index < key)
        .reduce((acc, val) => acc + Math.floor((val.value / totalValue) * 350), 0) : 0
    })

    kids = (items && items.length && items.map((balance, key) => (
        <BalanceItem
          key={key}
          rotate={rotates[key]}
          color={cols(key)}
          totalValue={totalValue}
          {...balance} />
    ))) || kids
  }

  return (
    <div className='balance-container'>
      <div className='balance'>{totalValue.toLocaleString(...currencyFormat)}</div>
      {details ? <p>{details}</p> : <p>
        A snapshot of your portfolio and its associated tokens.
        If you find any of the tokens you expect to see here missing, head on
        to the <a href='/portfolios'>Portfolio</a> section to add custom tokens.
      </p>}

      <List className='assets-list'>
        {kids || <p>No Items</p>}
      </List>
    </div>
  )
}

/*


<ListItem
  key={key}
  className='item'
  style={{...noPaddingStyle}}
  containerElement='div'
  innerDivStyle={{...noPaddingStyle}}
  leftAvatar={<AssetAllocation rotate={rotates[key]} color={cols(key)} percent={(balance.value / totalValue) * 100} />}
>
</ListItem>
 */

const BalanceItem = ({rotate = 0, color = colors[0][0], totalValue = 0, ...balance}) => (
  <ListItem
    className='item'
    style={{...noPaddingStyle}}
    containerElement='div'
    innerDivStyle={{...noPaddingStyle}}
    leftAvatar={<AssetAllocation rotate={rotate} color={color} percent={totalValue ? (balance.value / totalValue) * 100 : 0} />}
  >
    <div className='item-content'>
      <div className='token'>{balance.title}</div>
      <div className='values'>
        <div className='amount'>{balance.amount.toLocaleString()}</div>
        <div className='value'>{balance.value.toLocaleString(...currencyFormat)}</div>
      </div>
    </div>
  </ListItem>
)

const AssetAllocation = props => (
  <Circle
    className='allocation'
    style={{
      transform: `rotate(${Math.floor(props.rotate)}deg)`,
      position: 'static',
      top: 'auto',
      left: 'auto'
    }}
    percent={props.percent}

    strokeWidth='18' strokeColor={props.color}
    trailWidth='18' strokeLinecap='square' trailColor='rgba(0,0,0,0.1)' />
)

export default Balance
