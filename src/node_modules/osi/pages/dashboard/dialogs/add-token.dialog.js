import React from 'react'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import Dialog from 'material-ui/Dialog'
import Button from 'react-md/lib/Buttons/Button'
import TextField from 'material-ui/TextField'
import Toggle from 'material-ui/Toggle'
import { unitMap } from '../../../../../utils/Trades/Token'
import { recordEvent } from 'osi/analytics'
import StepperWrapper, { StepWrapper } from './stepper'
import { isEtherAddress } from '../../../../../utils'
import * as portfolioActions from '../../../../../actions/portfolio.actions'
import './add-token.dialog.css'

const DEBUG = false

const RaisedButton = props => <Button raised {...props} />
const FlatButton = props => <Button flat {...props} />

/**
 * Dialog with action buttons. The actions are passed in as an array of React objects,
 * in this example [FlatButtons](/#/components/flat-button).
 *
 * You can also close this dialog by clicking outside the dialog, or with the 'Esc' key.
 */
class AddTokenDialog extends React.Component {
  constructor (props) {
    super(props)
    this.state = this.getBaseState()
  }

  getBaseState () {
    return Object.assign({}, {
      open: false,
      finished: false,
      stepIndex: 0,
      decimalUnits: [Object.keys(unitMap)],
      errors: {},
      inputs: {
        contractAddress: '',
        ico_address: '',
        symbol: '',
        decimal: '',
        ico_initial_price_usd: '',
        customContract: false
      }
    }, DEBUG && {
      inputs: {
        contractAddress: '0xfd6259c709Be5Ea1a2A6eC9e89FEbfAd4c095778',
        ico_address: '0xfd6259c709Be5Ea1a2A6eC9e89FEbfAd4c095778',
        symbol: 'ELI',
        decimal: 42,
        ico_initial_price_usd: 3.415,
        customContract: true
      }
    })
  }

  handleNext () {
    const {stepIndex} = this.state
    this.setState({
      stepIndex: stepIndex + 1,
      finished: stepIndex >= 2
    })
  }

  handlePrev () {
    const {stepIndex} = this.state
    if (stepIndex > 0) {
      this.setState({stepIndex: stepIndex - 1})
    }
  }

  handleClose () {
    this.setState({...this.getBaseState()})
    this.props.then({close: true})
  }

  handleAddToken () {
    let start = Date.now()
    const { inputs: token } = this.state

    const { portfolioActions, portfolio } = this.props
    this.setState({busy: true})

    DEBUG && console.log('this.props:', this.props)
    DEBUG && console.log('adding token:', token)

    portfolioActions.associateTokenToPortfolio(portfolio.portfolio.pid, token)
      .then(result => this.props.then(result))
      .then(result => result && this.handleClose())
      .then(_ => {
        let end = Date.now()
        let duration = end - start
        const addTokenEvent = {
          token: token,
          pid: portfolio.portfolio.pid,
          duration: duration,
          keen: {
            timestamp: new Date().toISOString()
          }
        }
        recordEvent('add custom token to portfolio', addTokenEvent, function(err, res){
          if (err) {
            console.log('token error')
          }
          else {
            console.log('custom token added to profile!')
          }
        })
      })


    // ETHWallet.addToken({
    //   'address': token.address,
    //   'symbol': token.symbol,
    //   'decimal': token.decimal,
    //   'ico_contract_address': token.ico_address,
    //   'ico_initial_ico_initial_price_usd_usd' : token.ico_initial_price_usd,
    //   'type': 'custom'
    // })
    // recordEvent('add token', {
    //   action: 'new token',
    //   token: token
    // })
    // this.handleClose()
  }

  isInputsValid (args) {
    const { inputs, errors } = args || this.state
    const isValid = ([name]) => inputs[name] && !errors[name]
    if (inputs) {
      if (isValid`contractAddress` &&
          isValid`symbol` &&
          isValid`decimal` &&
          isValid`ico_initial_price_usd` &&
        ((inputs.customContract && isValid`ico_address`) || !inputs.customContract)) {
        return true
      } else {
        return false
      }
    }
  }

  inputChanged ([name]) {
    if (name === 'symbol' || name === 'ico_initial_price_usd' || name === 'contractAddress' || name === 'ico_address' || name === 'decimal') {
      const validate = (v) => ((name === 'contractAddress' || name === 'ico_address') && isEtherAddress(v)) ||
        ((name !== 'address' && name !== 'ico_address') && v)

      const update = (v) => {
        const { inputs, errors } = this.state
        const valid = validate(v)
        const finished = this.isInputsValid({
          inputs: { ...inputs, [name]: v },
          errors: { ...errors, [name]: !valid }
        })

        if (name === 'ico_initial_price_usd' || name === 'decimal') {
          v = parseFloat(v)
        }

        this.setState({
          inputs: { ...inputs, [name]: v },
          errors: { ...errors, [name]: !valid },
          finished
        })
      }

      return (e, v) => update(v)
    }
    return () => console.log('No handler for', name)
  }
  onSubmit (e) {
    const { stepIndex } = this.state
    const steps = 3
    const last = stepIndex === steps - 1

    e.preventDefault()
    if (!last) {
      this.setState({stepIndex: stepIndex + 1})
    } else {
      this.handleAddToken(e)
    }
  }

  render () {
    const { stepIndex } = this.state
    const steps = 3
    const last = stepIndex === steps - 1

    const actions = [
      <FlatButton
        label='Cancel'
        onTouchTap={this.handleClose.bind(this)}
      />,
      stepIndex > 0 && <RaisedButton
        label='Back'
        onTouchTap={this.handlePrev.bind(this)}
      />,
      stepIndex < steps - 1 && <RaisedButton
        label='Next'
        primary
        onTouchTap={this.handleNext.bind(this)}
      />,
      last && <RaisedButton
        label='Add Token'
        primary
        disabled={!this.state.finished}
        onTouchTap={this.onSubmit.bind(this)}
      />
    ]

    return (
      <Dialog
        className='add-token dialog'
        bodyClassName='body'
        contentClassName='content'
        actionsContainerClassName='actions'
        title='Add Custom Token'
        actions={actions}
        modal
        open={this.props.open}
        onRequestClose={this.handleClose.bind(this)}
      >
        <StepperWrapper
          onSubmit={this.onSubmit.bind(this)}
          onStep={(newIndex) => this.setState({stepIndex: newIndex})}
          activeStep={stepIndex}>

          <StepWrapper title='Account Address'
            help='Enter a valid Ethereum address into the input box'

            >
            <TextField name='contractAddress'
              errorText={this.state.errors.contractAddress && 'Address must be valid Ethereum address'}
              fullWidth
              floatingLabelText='Ethereum Address'
              hintText='e.g. 0x7FE2B88F2e4858dE375832FbF54aC7Cf1A78ca51'
              value={this.state.inputs.contractAddress}
              onChange={this.inputChanged`contractAddress`} />

          </StepWrapper>
          <StepWrapper title='Symbol'
            help='Symbol for the token - usally 3-4 characters in uppercase form; e.g. PLU'

            >
            <TextField name='symbol'
              errorText={this.state.errors.symbol && 'Symbol is required'}
              fullWidth
              floatingLabelText='Symbol'
              hintText='e.g. ACE'
              value={this.state.inputs.symbol}
              onChange={this.inputChanged`symbol`} />

          </StepWrapper>
          <StepWrapper title='Token Options'
            help='Symbol for the token - usally 3-4 characters in uppercase form; e.g. PLU'

            >
            <TextField name='decimal'
              fullWidth
              floatingLabelText='Decimals'
              hintText='e.g. 3'
              value={this.state.inputs.decimal}
              onChange={this.inputChanged`decimal`} />

            <TextField name='ico_initial_price_usd'
              fullWidth
              floatingLabelText='Initial Token Price in USD'
              hintText='3.67'
              value={this.state.inputs.ico_initial_price_usd}
              onChange={this.inputChanged`ico_initial_price_usd`} />

            <Toggle
              style={{
                marginTop: '1.3em'
              }}
              label='Token has Custom ICO Contract'
              toggled={this.state.inputs.customContract}
              onToggle={(e, checked) => this.setState({ inputs: { ...this.state.inputs, customContract: checked } })}
                      />
            {this.state.inputs.customContract && (
              <TextField name='ico-address'
                errorText={this.state.errors.ico_address}
                fullWidth
                floatingLabelText='Custom ICO Address'
                hintText='e.g. 0x7FE2B88F2e4858dE375832FbF54aC7Cf1A78ca51'
                value={this.state.inputs.ico_address}
                onChange={this.inputChanged`ico_address`} />
            )}

          </StepWrapper>
        </StepperWrapper>
        {false && last && !this.state.finished && (
          <div className='notif'>
            Please fill in all values
          </div>
        )}
      </Dialog>
    )
  }
}
function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    portfolios: state.portfolio.portfolios
  }
}

function mapDispatchToProps (dispatch) {
  return {
    portfolioActions: bindActionCreators(portfolioActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(AddTokenDialog)
