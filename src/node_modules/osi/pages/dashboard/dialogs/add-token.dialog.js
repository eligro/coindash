import React from 'react'
import Dialog from 'material-ui/Dialog'
import FlatButton from 'material-ui/FlatButton'
import RaisedButton from 'material-ui/RaisedButton'

import {
  Step,
  Stepper,
  StepLabel
} from 'material-ui/Stepper'

/**
 * Dialog with action buttons. The actions are passed in as an array of React objects,
 * in this example [FlatButtons](/#/components/flat-button).
 *
 * You can also close this dialog by clicking outside the dialog, or with the 'Esc' key.
 */
export default class DialogExampleSimple extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
      open: false,
      finished: false,
      stepIndex: 0
    }
    this.steps = this.getSteps()
  }

  handleNext () {
    const {stepIndex} = this.state
    this.setState({
      stepIndex: stepIndex + 1,
      finished: stepIndex >= 2
    })
  }

  handlePrev () {
    const {stepIndex} = this.state
    if (stepIndex > 0) {
      this.setState({stepIndex: stepIndex - 1})
    }
  }

  handleOpen () {
    this.setState({open: true})
  }

  handleClose () {
    this.props.then({close: true})
  }
  getSteps () {
    return [
      {title: 'ICO Contract Address', content: 'Select campaign settings...'},
      {title: 'Address', content: 'What is an ad group anyways?'},
      {title: 'Token Options', content: 'This is the bit I really care about!'}
    ]
  }

  render () {
    const {finished, stepIndex} = this.state
    const steps = this.steps

    const contentStyle = {margin: '0 16px'}

    const actions = [
      <FlatButton
        label='Cancel'
        primary
        onTouchTap={this.handleClose.bind(this)}
      />,
      <FlatButton
        label='Submit'
        primary
        keyboardFocused
        onTouchTap={this.handleClose.bind(this)}
      />
    ]

    return (
      <Dialog
        className='add-token dialog'
        bodyClassName='body'
        contentClassName='content'
        actionsContainerClassName='actions'
        title='Add Custom Token'
        actions={actions}
        modal
        open={this.props.open}
        onRequestClose={this.handleClose.bind(this)}
      >
        <Stepper activeStep={stepIndex} style={{fontSize: '20px'}}>
          {steps.map((s, sindex) => (
            <Step style={{fontSize: '20px'}}>
              <StepLabel style={sindex === stepIndex ? activeStepStyle : stepsStyle}>{s.title}</StepLabel>
            </Step>
          ))
        }
        </Stepper>

        <div style={contentStyle}>
          {finished ? (
            <p>
              <a
                href='#'
                onClick={(event) => {
                  event.preventDefault()
                  this.setState({stepIndex: 0, finished: false})
                }}
                  >
                    Click here
                  </a> to reset the example.
                </p>
              ) : (
                <div>
                  <p>{this.steps[stepIndex].content}</p>
                  <div style={{marginTop: 12}}>
                    <FlatButton
                      label='Back'
                      disabled={stepIndex === 0}
                      onTouchTap={this.handlePrev.bind(this)}
                      style={{marginRight: 12}}
                    />
                    <RaisedButton
                      label={stepIndex === 2 ? 'Finish' : 'Next'}
                      primary
                      onTouchTap={this.handleNext.bind(this)}
                    />
                  </div>
                </div>
              )}
        </div>
      </Dialog>
    )
  }
}

const stepsStyle = {
  color: '#FFF'
}
const activeStepStyle = {
  ...stepsStyle,
  fontSize: '20px'
}
/*

<Modal show={this.state.showAddToken} onHide={this.closeAddToken}>
  <Modal.Header closeButton>
    <Modal.Title>Add Token</Modal.Title>
  </Modal.Header>
  <Modal.Body>
    <AddTokenForm token={this.state.token} />
  </Modal.Body>
  <Modal.Footer>
    <Button onClick={() => { this.addToken(); this.closeAddToken() }}>Add</Button>
    <Button onClick={this.closeAddToken}>Cancel</Button>
  </Modal.Footer>
</Modal>

*/
