import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'

import * as userActions from '../../../../../actions/user.actions'

import * as adminActions from '../../../../../actions/admin.actions'

import getMuiTheme from 'material-ui/styles/getMuiTheme'
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'
import lightBaseTheme from 'material-ui/styles/baseThemes/lightBaseTheme'
import darkBaseTheme from 'material-ui/styles/baseThemes/darkBaseTheme'
import coindashBaseTheme from 'osi/themes/coindashBaseTheme'
import coindashDarkTheme from 'osi/themes/coindashDarkTheme'

import Paper from 'material-ui/Paper'

import './portfolio-management.css'

import RaisedButton from 'material-ui/RaisedButton'
import FlatButton from 'material-ui/FlatButton'
import {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card'

import Menu from 'material-ui/Menu'
import MenuItem from 'material-ui/MenuItem'
import AppBar from 'material-ui/AppBar'

import Checkbox from 'material-ui/Checkbox'
import ActionFavorite from 'material-ui/svg-icons/action/favorite'
import ActionFavoriteBorder from 'material-ui/svg-icons/action/favorite-border'
import Visibility from 'material-ui/svg-icons/action/visibility'
import VisibilityOff from 'material-ui/svg-icons/action/visibility-off'

console.log('MuiThemeProvider', MuiThemeProvider)

const themes = {
  darkBaseTheme: {
    theme: darkBaseTheme
  },
  lightBaseTheme: {
    theme: lightBaseTheme
  },
  coindashBaseTheme: {
    theme: coindashBaseTheme
  },
  coindashDarkTheme: {
    theme: coindashDarkTheme
  }
}

let selectedTheme = 'coindashBaseTheme'

const setSelectedTheme = (st) => {
  console.log('st?', st)
  console.log('selectedTheme', selectedTheme)

  selectedTheme = st
  console.log('selectedTheme', selectedTheme)
}

class Wrap extends Component {
  constructor (props) {
    super(props)

    this.state = {
      selectedTheme
    }
  }
  componentDidUpdate () {
    setSelectedTheme(this.state.selectedTheme)
    console.log('new selectedTheme:', selectedTheme)
  }

  render () {
    console.log('this:', this)
    const Childs = () => this.props.children
    return (
        <Paper className='pm-wrap' zDepth={1}>
          <div>
            Set theme:
            <ul>
              {Object.keys(themes).map(t => (
                <li key={t} onClick={e => this.setState({selectedTheme: t})}>
                  {t}
                  {t === this.state.selectedTheme && (<span>&lt;- Selected</span>)}
                </li>
              ))}
            </ul>
          </div>
          <AppBar title='My AppBar' />

          <div>
            <RaisedButton label='Default' style={style} />
            <RaisedButton label='Primary' primary style={style} />
            <RaisedButton label='Secondary' secondary style={style} />
            <RaisedButton label='Disabled' disabled style={style} />
            <br />
            <br />
            <RaisedButton label='Full width' fullWidth />
          </div>
          <div />
          <Childs />
          <Demo />
        </Paper>

    )
  }
}
export const PMWrap = connect(mapStateToProps, mapDispatchToProps)(Wrap)

class Home extends Component {
  render () {
    console.log('HOME ]]] this:', this)
    return (
      <MuiThemeProvider muiTheme={this.context.muiTheme}>
        <div>

          <h2>HOME BUTTONS</h2>

          <div>
            <RaisedButton label='Default' style={style} />
            <RaisedButton label='Primary' primary style={style} />
            <RaisedButton label='Secondary' secondary style={style} />
            <RaisedButton label='Disabled' disabled style={style} />
            <br />
            <br />
            <RaisedButton label='Full width' fullWidth />
          </div>
          <Demo />
        </div>
      </MuiThemeProvider>
    )
  }
}

Home.contextTypes = {
  muiTheme: PropTypes.object
}

const style = {
  margin: 12
}
const Demo = (props, context) => {
  console.log('DEMO ]]] context:', context)
    return (
      <MuiThemeProvider muiTheme={context.muiTheme}>
        <div>
          <h1>{selectedTheme}</h1>
          <div>
            <RaisedButton label='Default' style={style} />
            <RaisedButton label='Primary' primary style={style} />
            <RaisedButton label='Secondary' secondary style={style} />
            <RaisedButton label='Disabled' disabled style={style} />
            <br />
            <br />
            <RaisedButton label='Full width' fullWidth />
          </div>
          <div>
            <FlatButton label='Default' />
            <FlatButton label='Primary' primary />
            <FlatButton label='Secondary' secondary />
            <FlatButton label='Disabled' disabled />
            <br />
            <br />
            <FlatButton label='Full width' fullWidth />
          </div>
          <Card>
            <CardHeader
              title='URL Avatar'
              subtitle='Subtitle'
              avatar='images/jsa-128.jpg'
            />
            <CardMedia
              overlay={<CardTitle title='Overlay title' subtitle='Overlay subtitle' />}
            >
              <img src='images/nature-600-337.jpg' alt='' />
            </CardMedia>
            <CardTitle title='Card title' subtitle='Card subtitle' />
            <CardText>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            Donec mattis pretium massa. Aliquam erat volutpat. Nulla facilisi.
            Donec vulputate interdum sollicitudin. Nunc lacinia auctor quam sed pellentesque.
            Aliquam dui mauris, mattis quis lacus id, pellentesque lobortis odio.
          </CardText>
            <CardActions>
              <FlatButton label='Action1' />
              <FlatButton label='Action2' />
            </CardActions>
          </Card>
          <div style={styles.block}>
            <Checkbox
              label='Simple'
              style={styles.checkbox}
            />
            <Checkbox
              checkedIcon={<ActionFavorite />}
              uncheckedIcon={<ActionFavoriteBorder />}
              label='Custom icon'
              style={styles.checkbox}
            />
            <Checkbox
              checkedIcon={<Visibility />}
              uncheckedIcon={<VisibilityOff />}
              label='Custom icon of different shapes'
              style={styles.checkbox}
            />
            <Checkbox
              label='Disabled unchecked'
              disabled
              style={styles.checkbox}
            />
            <Checkbox
              label='Disabled checked'
              checked
              disabled
              style={styles.checkbox}
            />
            <Checkbox
              label='Label on the left'
              labelPosition='left'
              style={styles.checkbox}
            />
          </div>
        </div>
      </MuiThemeProvider>
    )
  }

Demo.contextTypes = {
  muiTheme: PropTypes.object
}

const styles = {
  block: {
    maxWidth: 250
  },
  checkbox: {
    marginBottom: 16
  }
}
const MenuExampleSimple = (props) => (
  <MuiThemeProvider>
    <div>
      <Paper style={style}>
        <Menu>
          <MenuItem primaryText='Maps' />
          <MenuItem primaryText='Books' />
          <MenuItem primaryText='Flights' />
          <MenuItem primaryText='Apps' />
        </Menu>
      </Paper>
      <Paper style={style}>
        <Menu>
          <MenuItem primaryText='Refresh' />
          <MenuItem primaryText='Help &amp; feedback' />
          <MenuItem primaryText='Settings' />
          <MenuItem primaryText='Sign out' />
        </Menu>
      </Paper>
    </div>
  </MuiThemeProvider>
)

export const PMHome = connect(mapStateToProps, mapDispatchToProps)(Home)

function mapStateToProps (state, ownProps) {
  console.info('state:', state)
  console.info('ownProps:', ownProps)
  return {
    user: state.user,
    isAdmin: state.admin.active,
    selectedTheme
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch),
    adminActions: bindActionCreators(adminActions, dispatch)
  }
}
