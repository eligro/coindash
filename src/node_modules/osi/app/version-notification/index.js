import React, { Component } from 'react'
import { connect } from 'react-redux'

import { bindActionCreators } from 'redux'

import Dialog from 'material-ui/Dialog'
import FlatButton from 'material-ui/FlatButton'
import RaisedButton from 'material-ui/RaisedButton'

import * as User from 'osi/user'

import * as userActions from '../../../../actions/user.actions'

import packageJSON from '../../../../../package.json'
console.log('packageJSON:', packageJSON)

class VersionNotificationDialog extends Component {
  constructor (props) {
    super(props)

    this.state = {
      isOpen: false
    }
  }

  componentWillUpdate (nextProps, nextState) {
    // Check App version state
    if (!nextProps.userProps || !nextProps.userProps.lastVersion) {
      console.log('no props, no last version')
      // Show welcome version
      if (!nextProps.user || !nextProps.user.showVersionNotification) {
        console.log('no notification show')
        this.props.userActions.showVersionNotification()
      } else if (nextProps.user && nextProps.user.showVersionNotification && !nextState.isOpen) {
        this.setState({isOpen: true})
      }
    }
  }

  handleOpen () {
    this.setState({open: true})
  }

  handleDismiss () {
    console.log('this is props:', this.props)
    const { uid } = this.props.user.profile
    const { version } = packageJSON
    const { lastVersion } = this.props.userProps

    if (!lastVersion) {
      console.log('not last version')
      this.props.userActions.hideVersionNotification(uid, version)
    }
    // this.props.userActions.hideVersionNotification(uid)
    // this.setState({open: false})
  }

  render () {
    const actions = [
      <FlatButton
        label='Dismiss'
        primary
        onTouchTap={this.handleDismiss.bind(this)}
      />
    ]

    return (
      this.props.user.showVersionNotification && (
        <Dialog
          title='Version Update'
          actions={actions}
          modal
          open={this.state.isOpen}
        >
          Hello Eli!

          Latest version is 0.3.8
        </Dialog>
      )
    )
  }
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    userProps: state.user.profile.properties || {}
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(VersionNotificationDialog)
