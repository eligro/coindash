import firebase from '../../../../utils/database.react.js'
import { getCurrentUser } from 'osi/auth'
import { usersPath } from 'osi/user'

export const portfoliosPath = 'portfolios'
const db = firebase.database()
const portfoliosRef = db.ref(portfoliosPath)

// console.log('firebase:', firebase)
const PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'

export function decodeFirebaseTimestamp (id) {
  id = id.substring(0, 8)
  var timestamp = 0
  for (var i = 0; i < id.length; i++) {
    var c = id.charAt(i)
    timestamp = timestamp * 64 + PUSH_CHARS.indexOf(c)
  }
  return timestamp
}

export const createPortfolio = ({name, uid, description}) => {
  let newPfid = portfoliosRef.push().key
  let newUserKey = db.ref(`${usersPath}/${uid}/portfolios`).push().key
  let pid = (Math.random() * 10000000000).toString(36).substr(2).split('.').reverse().join('')
  // let newPIDKey = db.ref('pids').child(pid)

  // create a portfolio in `portfolios` and link it to the user at `users/$uid/portfolios`
  let updates = {}
  let portfolio = {
    createdOn: firebase.database.ServerValue.TIMESTAMP,
    pid,
    name,
    owner: uid,
    description
  }
  updates[`${usersPath}/${uid}/portfolios/${newUserKey}`] = newPfid
  updates[`${portfoliosPath}/${newPfid}`] = {...portfolio}

  return db.ref().update(updates)
    .then(e => {
      // console.log('result of updates:', e)
      return {[`pids/${pid}`]: newPfid}
    })
    .then(r => db.ref().update(r))
    .then(_ => ({
      pfid: newPfid,
      userKey: newUserKey,
      portfolio
    }))
}

export const getPortfolio = pfid => {
  return portfoliosRef.child(pfid).once('value')
    .then(snp => snp.val())
}

export const getUserPortfolios = (uid, {fromIndex, limit = 50} = {}) => {
  let userPortfoliosRef = db.ref(`${usersPath}/${uid}/portfolios`)

  return new Promise((resolve, reject) => {
    let children = []
    userPortfoliosRef.limitToFirst(limit).once('value', snp => {
      // console.info('snapshot:', snp)
      snp.forEach(csnp => { children.push({key: csnp.key, pfid: csnp.val()}) })
      // console.log('children by now?', children)

      let promises = children.map(
        ({pfid, key}) => getPortfolio(pfid)
          .then(pf => {
            // console.log('result of get portfolio:', pf)
            return {
              pfid,
              portfolio: pf,
              userKey: key
            }
          })
      )

      Promise.all(promises)
        .then(portfolios => {

          resolve(portfolios.filter(pf => pf.portfolio))
        })

      // resolve(children)
    })
  })
}
