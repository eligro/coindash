import React, { Component } from 'react'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import Dialog from 'material-ui/Dialog'
import FlatButton from 'material-ui/FlatButton'
import * as userActions from '../../../../actions/user.actions'
import packageJSON from '../../../../../package.json'
import CHANGELOG from '../../../../../CHANGELOG.md'
import semver from 'semver'
import marked from "marked"



console.log('CHANGELOG:', CHANGELOG)

class VersionNotificationDialog extends Component {
  constructor (props) {
    super(props)
    this.state = { isOpen: false }
  }

  componentDidMount () {
    const version = packageJSON.version
    const lastVersion = this.props.user.properties.lastVersion

    // Check App version state
    console.info('user last version:', lastVersion)
    console.info('current app version:', version)
    
    if (semver.gt(version, lastVersion)) {
      // First, Take user on a tour
      // Then, update user properties to reflect latestVersion
      // this.props.user.updateLatestVersion
      this.setState({isOpen: true})
    }
   }


  componentWillMount() {
    const readmePath = require('../../../../../CHANGELOG.md');

    fetch(readmePath)
      .then(response => {
        return response.text()
      })
      .then(text => {
        this.setState({
          markdown: marked(text)
        })
      })
  }

  handleDismiss () {
    this.setState({isOpen: false})
  }

  render () {
    const { markdown } = this.state
    const actions = [
      <FlatButton
        label='Dismiss'
        primary
        onTouchTap={this.handleDismiss.bind(this)}
      />
    ]

    return (
      <div>
        <Dialog
          title='Version Update'
          actions={actions}
          modal
          autoScrollBodyContent={true}
          open={this.state.isOpen}
        >
          Hello Eli!

          Latest version is 0.3.8

          <pre>
            <div dangerouslySetInnerHTML={{__html: markdown}}></div>
          </pre>
        </Dialog>
      </div>
    )
  }
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(VersionNotificationDialog)
