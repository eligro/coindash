import React from 'react'
import colors from 'styleguide/colors'
import { Circle } from 'rc-progress'
import { currencyFormat } from 'osi/config'

import Paper from 'react-md/lib/Papers'

import {List, ListItem} from 'material-ui/List'
import Subheader from 'material-ui/Subheader'

const Balance = (props) => {
  const { balances = {}, onboarding } = props
  const { fetching = true } = balances

  if (fetching) return <span>Loading...</span>
  //   leftAvatar={
  //     <Circle percent={0} strokeWidth='18' strokeColor={cols[0]} trailWidth='18' strokeLinecap='square' trailColor='rgba(0,0,0,0.1)' />
  //   }
  console.log('what are the balances?', balances)
  return (
    <Paper className='balance-card' zDepth={0}>
      <h4>Balance</h4>
      {onboarding && <OnBoarding />}
      {!onboarding && fetching && <span>Loading...</span>}
      {!onboarding && !fetching && (
        <AssetsList items={balances.data}>
        </AssetsList>
      )}
    </Paper>
  )
}

const OnBoarding = props => (
  <div className='onboarding'>
    <div className='balance'>$0.00</div>
    <p>Create your first crypto portfolio to see your balance and token data here at one glance.</p>

    <AssetsList>
      <ListItem
        leftAvatar={
          <Circle percent={0} strokeWidth='18' strokeColor={colors[0][0]} trailWidth='18' strokeLinecap='square' trailColor='rgba(0,0,0,0.1)' />
        }
        rightIcon={<span>$0.00</span>}
        primaryText='0.00'
        secondaryText=''
      />
    </AssetsList>
  </div>
)

const noPaddingStyle = { padding: 0 }

const AssetsList = props => {
  const { items } = props
  let kids = props.children

  if (items && items.length) {
    const cols = key => colors[items.length][key]
    const totalValue = items.reduce((acc, val) => acc + val.value, 0)

    const rotates = items.map((balance, key) => {
      return key > 0 ? items.filter((item, index) => index < key)
        .reduce((acc, val) => acc + ((val.value / totalValue) * 360), 0) : 0
    })

    kids = (items && items.length && items.map((balance, key) => console.log('gap degree:', (balance.value / totalValue) * 360) || (
      <ListItem
        key={key}
        className='item'
        style={{...noPaddingStyle}}
        containerElement='div'
        innerDivStyle={{...noPaddingStyle}}
        leftAvatar={<AssetAllocation rotate={rotates[key]} color={cols(key)} percent={(balance.value / totalValue) * 100} />}
      >
        <div className='item-content'>
          <div className='token'>{balance.title}</div>
          <div className='values'>
            <div className='amount'>{balance.amount.toLocaleString()}</div>
            <div className='value'>{balance.value.toLocaleString(...currencyFormat)}</div>
          </div>
        </div>
      </ListItem>
    )))
  }
  return (
    <List className='assets-list'>
      <Subheader style={{paddingLeft: 56}}>Assets</Subheader>
      {kids}
    </List>
  )
}

const AssetAllocation = props => (
  <Circle
    className='allocation'
    style={{
      transform: `rotate(${Math.floor(props.rotate)}deg)`,
      position: 'static',
      top: 'auto',
      left: 'auto'
    }}
    percent={props.percent}

    strokeWidth='18' strokeColor={props.color}
    trailWidth='18' strokeLinecap='square' trailColor='rgba(0,0,0,0.1)' />
)

export default Balance
