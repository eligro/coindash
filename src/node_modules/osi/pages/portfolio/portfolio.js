import React, { Component } from 'react'
import RaisedButton from 'material-ui/RaisedButton'

import { connect } from 'react-redux'

export class Portfolio extends Component {
  createPortfolio () {
    console.info('create portfolio clicked :)')
  }

  render () {
    return (
      <div>
        <h1>My Portfolios</h1>

        <p>You do not have any portfolios, why not create one?</p>

        <RaisedButton label='Create new Portfolio' onClick={(e) => this.createPortfolio()} />
      </div>
    )
  }
}

function mapStateToProps (state, ownProps) {
  // let sorted = [...state.balances.sort((a, b) => a.value > b.value ? 1 : -1)]
  // let [most, least] = [sorted.pop(), sorted.find(e => e.value >= 0.01)]

  return {
    // balances: state.balances,
    // chartData: state.charts.chartData,
    // performanceData: state.charts.preformanceData,
    // portfolioDayDataByDate: _.cloneDeep(state.charts.portfolioDayDataByDate),
    // front: state.coins.front,
    // exchanges: state.exchanges,
    // statusText: state.charts.statusText,
    // balanceError: state.charts.balanceError,
    // chartError: state.charts.error,
    // balance: {
    //   // lastMonth: state.charts.chartData.portfolioAggDelta
    //   //   .filter(([date, value]) => date > lastMonth) // only last 30 days
    //   //   .filter((e, i, a) => i === 0 || i === a.length - 1) // first and last
    //   //   .filter((e, i, a) => console.info('last month e,i,a', e, i, a) || true)
    //   //   .reduce((t, [time, value]) => t > 0 ? value - t : value, 0),
    //   tokens: state.balances.length,
    //   most,
    //   least
    // }
  }
}

function mapDispatchToProps (dispatch) {
  return {
    // coinActions: bindActionCreators(coinActions, dispatch),
    // chartActions: bindActionCreators(chartActions, dispatch),
    // balancesActions: bindActionCreators(balancesActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(Portfolio)
