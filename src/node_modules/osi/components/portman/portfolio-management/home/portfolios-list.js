import React, {Component} from 'react'
import { Link } from 'react-router'
import { decodeFirebaseTimestamp } from 'osi/components/portman'
// import {
//   Table,
//   TableBody,
//   TableFooter,
//   TableHeader,
//   TableHeaderColumn,
//   TableRow,
//   TableRowColumn
// } from 'material-ui/Table'

import TextField from 'material-ui/TextField'
import Toggle from 'material-ui/Toggle'
import Button from 'react-md/lib/Buttons/Button'

import DataTable from 'react-md/lib/DataTables/DataTable'
import TableHeader from 'react-md/lib/DataTables/TableHeader'
import TableBody from 'react-md/lib/DataTables/TableBody'
import TableRow from 'react-md/lib/DataTables/TableRow'
import TableColumn from 'react-md/lib/DataTables/TableColumn'
import Avatar from 'react-md/lib/Avatars'

import PortfolioAvatar from 'osi/bits/portfolio-avatar'

const RaisedButton = (props) => <Button raised {...props}>{props.children}</Button>

const styles = {
  propContainer: {
    width: 200,
    overflow: 'hidden',
    margin: '20px auto 0'
  },
  propToggleHeader: {
    margin: '20px auto 10px'
  }
}

const tableData = [
  {
    name: 'John Smith',
    status: 'Employed'
  },
  {
    name: 'Randal White',
    status: 'Unemployed'
  },
  {
    name: 'Stephanie Sanders',
    status: 'Employed'
  },
  {
    name: 'Steve Brown',
    status: 'Employed'
  },
  {
    name: 'Joyce Whitten',
    status: 'Employed'
  },
  {
    name: 'Samuel Roberts',
    status: 'Employed'
  },
  {
    name: 'Adam Moore',
    status: 'Employed'
  }
]

/**
 * A more complex example, allowing the table height to be set, and key boolean properties to be toggled.
 */
export default class TableExampleComplex extends Component {
  constructor (props) {
    super(props)

    this.state = {
      fixedHeader: true,
      fixedFooter: true,
      stripedRows: false,
      showRowHover: false,
      selectable: true,
      multiSelectable: false,
      enableSelectAll: false,
      deselectOnClickaway: true,
      showCheckboxes: true,
      height: '300px'
    }
  }

  handleToggle (event, toggled) {
    this.setState({
      [event.target.name]: toggled
    })
  }

  handleChange (event) {
    this.setState({height: event.target.value})
  }

  render () {
    const { portfolios = [] } = this.props
    return (
      <div className='portfolios-list'>

        <DataTable plain>
          <TableHeader
          >
            <TableRow>
              <TableColumn className='avatar' />
              <TableColumn colSpan='2'>Name</TableColumn>
            </TableRow>
          </TableHeader>
          <TableBody
          >
            {portfolios.map((pf, index) => (
              <TableRow key={index} className='portfolio' onClick={(e) => this.props.onCellClick(e, pf, index)}>
                <TableColumn className='avatar'>
                  <PortfolioAvatar portfolio={pf} />
                </TableColumn>
                <TableColumn className='name'>
                  <h4><Link to={`/p/${pf.portfolio.pid}`}>{pf.portfolio.name}</Link></h4>
                  {pf.portfolio.description && (<p>{pf.portfolio.description}</p>)}
                </TableColumn>
                <TableColumn />
              </TableRow>
            ))}
          </TableBody>
        </DataTable>

      </div>
    )
  }
}

/**
 *

         <Table
           fixedHeader={this.state.fixedHeader}
           fixedFooter={this.state.fixedFooter}
           selectable={false}
           onCellClick={(...args) => this.props.onCellClick(...args)}
         >
           <TableHeader
             displaySelectAll={false}
             adjustForCheckbox={false}
             enableSelectAll={false}
           >
             <TableRow>
               <TableHeaderColumn colSpan='3' tooltip='The Name'>Name</TableHeaderColumn>
             </TableRow>
           </TableHeader>
           <TableBody
             displayRowCheckbox={false}
             showRowHover
           >
             {portfolios.map((pf, index) => (
               <TableRow key={index} className='portfolio'>
                 <TableRowColumn style={{width: 80}}><Avatar>{pf.portfolio.name.split(' ').map(l => l[0]).join('').toUpperCase()}</Avatar></TableRowColumn>
                 <TableRowColumn className='name'>
                   <h4><Link to={`/p/${pf.portfolio.pid}`}>{pf.portfolio.name}</Link></h4>
                   {pf.portfolio.description && (<p>{pf.portfolio.description}</p>)}
                 </TableRowColumn>
                 <TableRowColumn />
               </TableRow>
             ))}
           </TableBody>
           <TableFooter
             adjustForCheckbox={this.state.showCheckboxes}
           >
             <TableRow>
               <TableRowColumn colSpan='3' style={{textAlign: 'center', padding: '1em'}}>
                 <RaisedButton label='Create new Portfolio' onClick={e => this.props.onCreatePortfolio(e)} />
               </TableRowColumn>
             </TableRow>
           </TableFooter>
         </Table>
 *
 */
