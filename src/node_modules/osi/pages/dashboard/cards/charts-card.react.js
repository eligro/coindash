import React, { Component } from 'react'
import { Button, OverlayTrigger, Tooltip, ButtonGroup } from 'react-bootstrap'
import FontAwesome from 'react-fontawesome'
import Card from 'osi/components/card/card.react'
import StocksChart from '../charts/StocksChart.react'
import AssetAllocationChart from '../../../../../components/common/charts/stocks/AssetAllocationChart.react'
import './charts-card.css'

class ChartsCard extends Component {
  constructor (props, context) {
    super(props, context)
    this.state = { selectedChart: 1, showError: true, showAddToken: false, token: { address: '', symbol: '', decimal: '', ico_contract_address: '' } }
  }
  render () {
    let actions = (<OverlayTrigger placement='bottom' overlay={<Tooltip id='add-token'>Refresh</Tooltip>}>
      <Button onClick={this.props.refreshChart} >
        <FontAwesome name='refresh' />
      </Button>
    </OverlayTrigger>)

    // set title
    let title = 'Benchmark'
    if (this.state.selectedChart === 2) {
      title = 'Allocation'
    }

    if (this.props.statusText && this.props.statusText > 0 && this.props.statusText < 100) {
      title += `... ${Math.floor(+this.props.statusText).toLocaleString()}% processed`
    }

    let charts = [
      {chartId: 1, title: 'Performance', icon: 'area-chart'},
      {chartId: 2, title: 'Allocation', icon: 'pie-chart'}
    ]

    return (
      <Card className='charts' title={title} headerActions={actions}>
        {this.state.selectedChart === 1 &&
            // this.props.chartData &&
            // this.props.portfolioDayDataByDate &&
            // this.props.exchanges &&
          <StocksChart chartData={this.props.chartData} dayDataByDate={this.props.portfolioDayDataByDate} exchanges={this.props.exchanges} />}
        {this.state.selectedChart === 2 && <AssetAllocationChart balances={this.props.balances} />}

        <card-footer>
          <ButtonGroup justified className='footer-children'>
            {charts.filter(c => !c.off).map(c => (
              <Button onClick={() => this.setSelectedChart(c.chartId)} className={['footer-child', (this.state.selectedChart === c.chartId ? 'active' : '')].join(' ')} key={c.title}>
                <FontAwesome name={c.icon} />
                <span>{c.title}</span>
              </Button>
            ))}
          </ButtonGroup>
        </card-footer>
      </Card>
    )
  }

  setSelectedChart (chartId) {
    this.setState({selectedChart: chartId})
  }
}

export default ChartsCard
