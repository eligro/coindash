import React, {Component} from 'react'
import { Link } from 'react-router'
import Button from 'react-md/lib/Buttons/Button'

import DataTable from 'react-md/lib/DataTables/DataTable'
import TableHeader from 'react-md/lib/DataTables/TableHeader'
import TableBody from 'react-md/lib/DataTables/TableBody'
import TableRow from 'react-md/lib/DataTables/TableRow'
import TableColumn from 'react-md/lib/DataTables/TableColumn'
import ActionDelete from 'material-ui/svg-icons/action/delete'

import PortfolioAvatar from 'osi/bits/portfolio-avatar'

// TODO - remove if not used in the table below
// const RaisedButton = (props) => <Button raised {...props}>{props.children}</Button>

/**
 * A more complex example, allowing the table height to be set, and key boolean properties to be toggled.
 */
export default class TableExampleComplex extends Component {
  constructor (props) {
    super(props)

    this.state = {
      fixedHeader: true,
      fixedFooter: true,
      stripedRows: false,
      showRowHover: false,
      selectable: true,
      multiSelectable: false,
      enableSelectAll: false,
      deselectOnClickaway: true,
      showCheckboxes: true,
      height: '300px'
    }
  }

  handleToggle (event, toggled) {
    this.setState({
      [event.target.name]: toggled
    })
  }

  handleChange (event) {
    this.setState({height: event.target.value})
  }

  onDeleteClicked (e, pf) {
    if (this.props.onDeletePortfolio) {
      this.props.onDeletePortfolio(pf)
    }
  }

  render () {
    const { portfolios = [], process } = this.props
    if (!portfolios.length) return (<h4>No portfolios</h4>)

    // const processes = process
    return (
      <div className='portfolios-list'>

        <DataTable plain>
          <TableHeader
          >
            <TableRow>
              <TableColumn className='avatar' />
              <TableColumn colSpan='2'>Name</TableColumn>
            </TableRow>
          </TableHeader>
          <TableBody
          >
            {portfolios.map((pf, index) => {
              const pfprocess = (process && process[pf.portfolio.pid]) || {}
              const { deleting } = pfprocess
              return (
              <TableRow key={index} className='portfolio-item'>
                <TableColumn className='avatar'>
                  <PortfolioAvatar portfolio={pf} />
                </TableColumn>
                <TableColumn className='name'>
                  <h4><Link to={`/p/${pf.portfolio.pid}`}>{pf.portfolio.name}</Link></h4>
                  {pf.portfolio.description && (<p>{pf.portfolio.description}</p>)}
                </TableColumn>
                <TableColumn>
                  {deleting && <span>Deleting...</span>}
                  {!deleting && <Button label='Delete' flat onClick={e => this.onDeleteClicked(e, pf)}><ActionDelete /></Button>}
                </TableColumn>

              </TableRow>
            )})}
          </TableBody>
        </DataTable>

      </div>
    )
  }
}

/**
 *

         <Table
           fixedHeader={this.state.fixedHeader}
           fixedFooter={this.state.fixedFooter}
           selectable={false}
           onCellClick={(...args) => this.props.onCellClick(...args)}
         >
           <TableHeader
             displaySelectAll={false}
             adjustForCheckbox={false}
             enableSelectAll={false}
           >
             <TableRow>
               <TableHeaderColumn colSpan='3' tooltip='The Name'>Name</TableHeaderColumn>
             </TableRow>
           </TableHeader>
           <TableBody
             displayRowCheckbox={false}
             showRowHover
           >
             {portfolios.map((pf, index) => (
               <TableRow key={index} className='portfolio'>
                 <TableRowColumn style={{width: 80}}><Avatar>{pf.portfolio.name.split(' ').map(l => l[0]).join('').toUpperCase()}</Avatar></TableRowColumn>
                 <TableRowColumn className='name'>
                   <h4><Link to={`/p/${pf.portfolio.pid}`}>{pf.portfolio.name}</Link></h4>
                   {pf.portfolio.description && (<p>{pf.portfolio.description}</p>)}
                 </TableRowColumn>
                 <TableRowColumn />
               </TableRow>
             ))}
           </TableBody>
           <TableFooter
             adjustForCheckbox={this.state.showCheckboxes}
           >
             <TableRow>
               <TableRowColumn colSpan='3' style={{textAlign: 'center', padding: '1em'}}>
                 <RaisedButton label='Create new Portfolio' onClick={e => this.props.onCreatePortfolio(e)} />
               </TableRowColumn>
             </TableRow>
           </TableFooter>
         </Table>
 *
 */
