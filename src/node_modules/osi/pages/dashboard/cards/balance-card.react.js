import React from 'react'
import { Button, OverlayTrigger, Tooltip } from 'react-bootstrap'
import { Circle } from 'rc-progress'
import FontAwesome from 'react-fontawesome'
import { currencyFormat } from '../dashboard.react'
import ScrollArea from 'react-scrollbar'
import Card from 'osi/components/card/card.react'
import colors from 'styleguide/colors'

import './balance-card.css'

const Valuable = props => (<OverlayTrigger placement='top' overlay={<Tooltip id='{props.className}-valuable'>Your {props.className} valuable token</Tooltip>}>
  <div className={props.className}>

    <value>{props.value.toLocaleString(...currencyFormat)}</value>
    <label><FontAwesome name='circle' /> {props.title}</label>
  </div>
</OverlayTrigger>)

export default (props) => {
  let {most, least} = props.balance
  let total = props.balances.reduce((v, c) => v + c.value, 0)

  let actions = (<OverlayTrigger placement='bottom' overlay={<Tooltip id='add-token'>Add Custom Token</Tooltip>}>
    <Button onClick={props.openAddToken} >
      <FontAwesome name='plus' />
    </Button>
  </OverlayTrigger>)
  let cols = colors[props.balances.length] || colors[0]

  return (
    <Card className='balances' title='Balance' headerActions={actions}>
      <h2>{props.balances
        .reduce((t, c) => t + c.value, 0)
        .toLocaleString(...currencyFormat)}</h2>
      <p>Your portfolio is composed of <code>{props.balance.tokens}</code> tokens.</p>

      <ScrollArea className='tokens-a'>
        <ul className='tokens'>
          {props.balances.sort((a, b) => a.value < b.value)
            .map((b, i) => (
              <li className={`token token-${b.title}`} key={b.title}>
                <Circle percent={b.value / total * 100} strokeWidth='18' strokeColor={cols[i]} trailWidth='18' strokeLinecap='square' trailColor='rgba(255,255,255,0.2)' />
                <div className='details'>
                  <value-amount>
                    <amount>{b.amount.toLocaleString()}</amount>
                    <value>{b.value.toLocaleString(...currencyFormat)}</value>
                  </value-amount>
                  <label>{b.title}</label>
                </div>
              </li>
          ))}
        </ul>
      </ScrollArea>

      <card-footer>
        {most && <Valuable className='most' value={most.value} title={most.title} />
        }
        {least && <Valuable className='least' value={least.value} title={least.title} />
        }
      </card-footer>
    </Card>
  )
}
