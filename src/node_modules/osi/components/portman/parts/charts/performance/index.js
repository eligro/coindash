import React from 'react'
import PropTypes from 'prop-types'
import ReactHighstock from 'react-highcharts/ReactHighstock.src'
import {Link} from 'react-router'
// import Highcharts from 'highcharts';
// import Highlight from 'react-highlight';
import Spinner from 'osi/bits/spinner'
import './performance.css'
import mainColors, { darkColors } from 'styleguide/colors'

import { currencyFormat } from 'osi/config'

const tls = (i) => (i || 0).toLocaleString(...currencyFormat)
const nf = (i) => new Intl.NumberFormat().format((i || 0))

class PerformanceChart extends React.Component {
  constructor (props) {
    super(props)

    this.state = {loading: false}
    console.info('performance chart instanciated', this)
  }

  componentDidMount () {
    this.parseData(this.props)
        // let chart = this.refs.chart.getChart();
        // chart.series.addPoint({x: 10, y: 12});

        // let chart = this.refs.chart;
        // console.log('refs', chart);
  }

  componentWillReceiveProps (nextProps) {
    this.parseData(nextProps)
  }

  componentWillUnmount () {
    clearTimeout(this.timeout)
  }

  parseData (nextProps) {
    const { calculations } = nextProps
    const calculationsReady = calculations && calculations.chartData && calculations.dayDataByDate

    if ((!this.state.calculationsReady && calculationsReady)) {
      this.setState({calculationsReady})
    }
  }

  getChartConfig () {
    const { calculations } = this.props
    const { chartData, dayDataByDate } = calculations

    const marketData = chartData.btcAggDelta
    const portfolioData = chartData.portfolioAggDelta

        // sort in ascending order
    marketData.sort(function (a, b) {
      let v1 = a[0]
      let v2 = b[0]

      return v1 - v2
    })

    portfolioData.sort(function (a, b) {
      let v1 = a[0]
      let v2 = b[0]

      return v1 - v2
    })

    var seriesOptions = []

    seriesOptions[0] = {
      name: 'ETH ($)',
      data: marketData,
      tooltip: {
        valueDecimals: 2
      },
      marker: {
        enabled: false
      },
      shadow: false,
      lineWidth: 0.5,
      color: '#efc400',
      fillOpacity: 1,
      type: 'areaspline'
    }

    seriesOptions[1] = {
      name: 'Portfolio ($)',
      data: portfolioData,
      tooltip: {
        valueDecimals: 2
      },
      marker: {
        enabled: false
      },
      shadow: false,
      lineWidth: 0.5,
      color: '#a728af',
      fillOpacity: 0.8,
      type: 'areaspline'
    }

    const config = {
      chart: 'area',
      rangeSelector: {
        selected: 1,
        enabled: false
      },
      navigator: {
        enabled: false
      },
      tooltip: {
        formatter: function () {
          let benchmarkValue = this.points[0]
          let portfolioValue = this.points[1]
          console.log('tooltip formatter!', dayDataByDate)

          let date = new Date(portfolioValue.x)
          let firstDay = new Date(portfolioData[0][0])

          // prepare balances
          let _balances = dayDataByDate[portfolioValue.x].balances
          let balances = _balances
            .sort((a, b) => a.fiatValue < b.fiatValue)
            .map(({symbol, balance, fiatValue, fiatCurrency}) => `<tr><td><code>${symbol}<code>\t</code></code></td><td>${nf(balance)}<code>\t</code></td><td>${tls(fiatValue)}</td></tr>`).join('')

          let ret = '<span><b>Portfolio Value</b> ' + tls(dayDataByDate[portfolioValue.x].dayFiatValue) + ' (' + date.toLocaleDateString() + ')</span>'
          ret += '<br/><span><b>Portfolio Overall Performance:</b> ' + Math.round((portfolioValue.y - 1) * 100) + '% (' + firstDay.toLocaleDateString() + ' - ' + date.toLocaleDateString() + ')'
          ret += '<br/><br/><b>BALANCES:</b><br/>'
          ret += '<table>' + balances + '</table>'
          ret += '<br/><span><b>Market(ETH) Overall Performance:</b> ' + Math.round((benchmarkValue.y - 1) * 100) + '% (' + firstDay.toLocaleDateString() + ' - ' + date.toLocaleDateString() + ')</span>'

          return ret
        },
        useHTML: true,
        backgroundColor: 'rgba(12, 12, 12, 0.85)',
        style: {
          color: '#F0F0F0'
        },
        borderRadius: 5,
        borderWidth: 0,
        padding: 10,
        shadow: false
      },
      series: seriesOptions,
      colors: mainColors[3] || darkColors[0],
      xAxis: {
        lineColor: '#fff',
        tickColor: '#fff',
        tickWidth: 0,
        lineWidth: 0,
        labels: {
          style: {
            color: 'rgba(255,255,255,0.7)',
            fontFamily: 'Comfortaa, sans-serif'
          }
        }
      },
      yAxis: {
        gridLineWidth: 0,
        lineColor: '#fff',
        tickColor: '#fff',
        tickLength: 0,
        tickWidth: 0,
        tickPosition: 'outside',
        labels: {
          align: 'left',
          x: 5,
          y: 5,
          style: {
            color: 'rgba(255,255,255,0.7)',
            fontFamily: 'Comfortaa, sans-serif'
          }
        },
        lineWidth: 0
                //  lineColor:'black'
      }
    }
    let theme = {
      colors: ['#2b908f', '#90ee7e', '#f45b5b', '#7798BF', '#aaeeee', '#ff0066', '#eeaaee',
        '#55BF3B', '#DF5353', '#7798BF', '#aaeeee'],
      chart: {
        backgroundColor: {
          linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
          stops: [
            [0, '#f45b5b'],
            [1, '#f45b5b']
          ]
        },
        style: {
          fontFamily: '\'Open Sans\', sans-serif'
        },
        plotBorderColor: '#606063',
        type: 'area'
      },
      title: {
        style: {
          color: '#E0E0E3',
          textTransform: 'uppercase',
          fontSize: '20px'
        }
      },
      subtitle: {
        style: {
          color: '#E0E0E3',
          textTransform: 'uppercase'
        }
      },
      plotOptions: {
        series: {
          dataLabels: {
            color: '#B0B0B3'
          },
          marker: {
            lineColor: '#333'
          }
        },
        boxplot: {
          fillColor: '#505053'
        },
        candlestick: {
          lineColor: 'white'
        },
        errorbar: {
          color: 'white'
        }
      },
      legend: {
        enabled: true,
        itemStyle: {
          color: '#E0E0E3'
        },
        itemHoverStyle: {
          color: '#FFF'
        },
        itemHiddenStyle: {
          color: '#606063'
        }
      },
      credits: {
        style: {
          color: '#666'
        }
      },
      labels: {
        style: {
          color: '#707073'
        }
      },

      drilldown: {
        activeAxisLabelStyle: {
          color: '#F0F0F3'
        },
        activeDataLabelStyle: {
          color: '#F0F0F3'
        }
      },

   // scroll charts
      rangeSelector: {
        buttonTheme: {
          fill: '#505053',
          stroke: '#000000',
          style: {
            color: '#CCC'
          },
          states: {
            hover: {
              fill: '#707073',
              stroke: '#000000',
              style: {
                color: 'white'
              }
            },
            select: {
              fill: '#000003',
              stroke: '#000000',
              style: {
                color: 'white'
              }
            }
          }
        },
        inputBoxBorderColor: '#505053',
        inputStyle: {
          backgroundColor: '#333',
          color: 'silver'
        },
        labelStyle: {
          color: 'silver'
        }
      }
    }

    Object.assign(config, theme)
    return config
  }

  render () {
    return (
      <div className='stock-charts'>
        {!this.state.calculationsReady && (
          <div className='spinner-container'>
            <Spinner rotateLogo={false}>Calculation in progress...</Spinner>
          </div>
        )}
        {this.state.calculationsReady && <ReactHighstock config={this.getChartConfig()} ref='chart' /> }

      </div>
    )
  }
}

PerformanceChart.propTypes = {
  calculations: PropTypes.object.isRequired
    //, exchanges: PropTypes.array.isRequired
}

export default PerformanceChart
