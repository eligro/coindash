import firebase from '../../../utils/database.react.js'
import { getCurrentUser } from 'osi/auth'

const usersPath = 'users'
const db = firebase.database()

getCurrentUser().then(user => {
  // console.log('our user is:', user)
  // console.info('our db is:', db)

  let userRef = db.ref('users/' + user.uid)

  // Listener for current user
  userRef.on('value', snp => {
    const val = snp.val()
    // console.log('snapshot value:', snp.val())
    if (!val) {
      // create new user in table, probably first timer
      createNewUser({
        uid: user.uid,
        name: user.displayName,
        photoUrl: user.photoURL
      })
    }
  })

  // Check if user is admin
  isAdmin(user.uid).then(d => {
    // console.log('isAdmin returned', d)
  })
})

const createNewUser = ({uid, name, photoUrl}) => {
  const userRef = getUserRef(uid)

  // make sure the `uid` doesn't exist...

  let user = {
    name,
    photoUrl
  }
  userRef.set(user)
    .then(v => {
      // console.log('user added')
    })
}

export const isAdmin = uid => {
  // console.info('checking if admin for', uid)
  let adminRef = db.ref(`admin/users/${uid}`)

  return new Promise((resolve, reject) => {
    adminRef.once('value')
    .then(snp => {
      const val = snp.val()
      // console.log('value:', val)
      resolve(val !== null)
    })
    .catch(err => {
      // console.log('admin/users/', uid, 'returned error:', err)
      if (err.code === 'PERMISSION_DENIED') {
        resolve(false)
      } else {
        reject(err)
      }
    })
  })
}

const getUserRef = (uid) => db.ref(`${usersPath}/${uid}`)
