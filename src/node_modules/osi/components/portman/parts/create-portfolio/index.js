import React, { Component } from 'react'
import Button from 'react-md/lib/Buttons/Button'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import * as userActions from '../../../../../../actions/user.actions'
import * as portfolioActions from '../../../../../../actions/portfolio.actions'
import CreatePortfolioDialog from './create-portfolio-dialog'

const RaisedButton = (props) => <Button raised {...props}>{props.children}</Button>

class CreatePortfolio extends Component {
  constructor (props) {
    super(props)

    this.state = {
      createPortfolioOpen: false
    }
  }

  createPortfolio () {
    this.setState({createPortfolioOpen: true})
  }

  onPortfolioCreated (dat) {
    // console.info('what is dat?', dat)
    this.props.portfolioActions.loadUserPortfolios(this.props.user.profile.uid)
      .then(res => {
        // console.log('what is res?', res)

        this.setState({createPortfolioOpen: false})
        if (this.props.onCreate) {
          this.props.onCreate(dat)
        }
      })
  }

  render () {
    return (
      <span className='create-portfolio'>
        <RaisedButton label={this.props.label || 'Create new Portfolio'} primary={this.props.primary} onClick={e => this.createPortfolio()} />

        <ConnectedCreatePortfolioDialog
          onCancel={e => this.setState({createPortfolioOpen: false})}
          onCreate={pf => this.onPortfolioCreated(pf)}
          isOpen={this.state.createPortfolioOpen} />
      </span>
    )
  }
}


const ConnectedCreatePortfolioDialog = connect(mapStateToProps, mapDispatchToProps)(CreatePortfolioDialog)

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    portfolios: state.portfolio.portfolios
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch),
    portfolioActions: bindActionCreators(portfolioActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(CreatePortfolio)
