import React, { Component } from 'react'
import { connect } from 'react-redux'
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap/dist/css/bootstrap-theme.css'
import { browserHistory } from 'react-router'
import { getCurrentUser } from 'osi/auth'
import { bindActionCreators } from 'redux'

import * as userActions from '../../../actions/user.actions'
import * as adminActions from '../../../actions/admin.actions'

import Sidenav from '../components/sidenav2'
import Header from 'osi/components/header'

import * as User from 'osi/user'

import './app.css'

class App extends Component {
  render () {
    return (
      <div className='App'>
        <Header style={{position: 'sticky'}} />
        <div className='main-container'>
          <Sidenav />
          {this.props.children}
        </div>
      </div>
    )
  }

  componentWillUpdate (nextProps, nextState) {
    // Check if user still logged in, navigate to /login if no user ID available
    if (!nextProps.user || !nextProps.user.loggedIn) {
      browserHistory.push('/login')
    }
  }
  componentDidMount () {
    // Check if user is logged in but doesn't have user data in state
    getCurrentUser().then(cu => {
      // if user exists and props don't have it, or have different user id, load user
      if (cu && (!this.props.user || this.props.user.uid !== cu.uid)) {
        this.props.userActions.loadUser(cu)
      }

      if (cu) {
        User.getUser(cu.uid)
          .then(userVal => {
            if (userVal === null) {
              // create new user in table, probably first timer
              User.createNewUser({
                uid: cu.uid,
                name: cu.displayName || cu.providerData[0].displayName || '',
                photoUrl: cu.photoURL || cu.providerData[0].photoURL || '',
                email: cu.email,
                emailVerified: cu.emailVerified
              })
              browserHistory.push('/dashboard')
            } else if (userVal && userVal.disabled) {
              browserHistory.push('/inactive')
            }
          })

        // check if user is admin
        User.isAdmin(cu.uid).then(admin => {
          if (admin) {
            this.props.adminActions.activateAdmin({
              gmode: admin === 'GMODE'
            })
          } else {
            this.props.adminActions.deactivateAdmin()
          }
        })
      }
    })
  }
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    isAdmin: state.admin.active
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch),
    adminActions: bindActionCreators(adminActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(App)
