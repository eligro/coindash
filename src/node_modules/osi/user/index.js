import firebase from '../../../utils/database.react.js'
import { getCurrentUser } from 'osi/auth'

const usersPath = 'users'

const db = firebase.database()

const getUserRef = (uid) => db.ref(`${usersPath}/${uid}`)

getCurrentUser().then(user => {
  console.log('our user is:', user)
  // console.info('our db is:', db)

  let userRef = db.ref('users/' + user.uid)

  // Listener for current user
  userRef.on('value', snp => {
    const val = snp.val()
    // console.log('snapshot value:', val)
    if (val === null) {
      // create new user in table, probably first timer
      createNewUser({
        uid: user.uid,
        name: user.displayName || user.providerData[0].displayName || '',
        photoUrl: user.photoURL || user.providerData[0].photoURL || '',
        email: user.email,
        emailVerified: user.emailVerified
      })
    }
  })

  // Check if user is admin
  isAdmin(user.uid).then(d => {
    // console.log('isAdmin returned', d)
  })
})

const createNewUser = ({uid, ...rest}) => {
  const userRef = getUserRef(uid)

  // make sure the `uid` doesn't exist...

  let user = {
    createdOn: firebase.database.ServerValue.TIMESTAMP,
    ...rest
  }

  console.log('adding user:', user)
  return userRef.set(user)
    .then(v => {
      console.log('user added', user)
    })
    .catch(err => {
      console.error('user add failed:', err)
    })
}

export const isAdmin = uid => {
  // console.info('checking if admin for', uid)
  let adminRef = db.ref(`admin/users/${uid}`)

  return new Promise((resolve, reject) => {
    adminRef.once('value')
    .then(snp => {
      const val = snp.val()
      // console.log('value:', val)
      resolve(val !== null)
    })
    .catch(err => {
      // console.log('admin/users/', uid, 'returned error:', err)
      if (err.code === 'PERMISSION_DENIED') {
        resolve(false)
      } else {
        reject(err)
      }
    })
  })
}

export const getUsers = ({fromIndex, limit = 50} = {}) => {
  let usersRef = db.ref(usersPath)

  return new Promise((resolve, reject) => {
    let children = []
    usersRef.limitToFirst(limit).once('value', snp => {
      snp.forEach(csnp => {
        children.push({uid: csnp.key, ...csnp.val()})
      })

      resolve(children)
    })
  })
}

/**
 * Use with onEnter route prop to restrict areas to adminstrative users
 *
 * Usage example:
 *
 * ```jsx
 * import { requireAdmin } from 'osi/user'
 *
 * <Route path='/admin' component={App} onEnter={requireAdmin}>
 * ```
 */
export const requireAdmin = (nextState, replace, done) => {
  getCurrentUser().then(user => {
    isAdmin(user.uid).then(admin => {
      if (!admin) {
        replace('/dashboard') // replace with 403
      }
      done()
    })
  })
  // isAdmin().then()
  // if (initialized && currentUser && currentUser.uid) done()
  // else if (initialized && (!currentUser || currentUser.uid)) {
  //   replace('/login')
  //   done('Unauthorized Access')
  // } else {
  //   waitToInitialize().then(na => {
  //     if (!currentUser || !currentUser.uid) {
  //       replace('/login')
  //     }
  //     done()
  //   })
  // }
}
