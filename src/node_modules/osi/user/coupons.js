import firebase from '../../../utils/database.react.js'
import { usersPath } from './'

export const metaPath = 'meta'
export const couponsPath = `${metaPath}/coupons`
export const presalePath = `${metaPath}/presale`

const db = firebase.database()

function CouponError (code) {
  this.name = 'CouponError'
  this.code = code || 'Default Message'
  this.stack = (new Error()).stack
}
CouponError.prototype = Object.create(Error.prototype)
CouponError.prototype.constructor = CouponError

export const isCouponValid = (coupon) => {
  return Promise.resolve(true)
  // return new Promise((resolve, reject) => db.ref(couponsPath).child(coupon)
  //   .once('value')
  //   .then(snp => {
  //     const value = snp.val()
  //     if (value.used) {
  //       throw new CouponError('coupon already redeemed.')
  //     } else {
  //       resolve(!!value && !value.used)
  //     }
  //   })
  //   .catch(err => {
  //     if (err.code === 'PERMISSION_DENIED') {
  //       reject(new CouponError('invalid coupon code.'))
  //     } else {
  //       reject(err)
  //     }
  //   })
  // )

}

export const addCoupon = (coupon) => {
  let cRef = db.ref(couponsPath).child(coupon)

  return cRef.set({
    used: false
  })
}

export const useCoupon = (coupon, uid) => {
  let updates = {}
  updates[`${couponsPath}/${coupon}/used`] = true
  updates[`${usersPath}/${uid}/coupon`] = {
    couponCode: coupon,
    usedOn: firebase.database.ServerValue.TIMESTAMP
  }

  return db.ref().update(updates)
}

export const getCouponValue = () => {
  let aRef = db.ref(presalePath).child('code')

  return new Promise((resolve, reject) => {
    aRef.once('value')
    .then(snp => {
      const value = snp.val()
      resolve(value)
    })
    .catch(err => {
      console.info('error getting coupon value:', err)
      reject(err)
    })
  })
}

export const userHasCoupon = (uid) => {
  return new Promise((resolve, reject) => db.ref(usersPath).child(uid).child('coupon')
    .once('value')
    .then(snp => {
      const value = snp.val()
      resolve(!!value && !value.used)
    })
    .catch(err => {
      if (err.code === 'PERMISSION_DENIED') {
        reject(err)
      }
    })
  ).then(hasCoupon => hasCoupon && db.ref(presalePath).child('code')
    .once('value')
    .then(snp => snp.val()))
}

export const getTNCs = () => db.ref(presalePath).child('TNCS').once('value')
  .then(snp => snp.val())
