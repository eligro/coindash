import React, { Component } from 'react'
import { Link, browserHistory } from 'react-router'
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'
import FontAwesome from 'react-fontawesome'
import { Button } from 'react-bootstrap'
import { NoAuthPage as Page, Card, Analytics } from 'osi/components'
import { Logo } from 'osi/bits'
import './login.css'
import packageJson from '../../../../../package.json'
import * as userActions from '../../../../actions/user.actions'
import Spinner from 'osi/bits/spinner'
import Paper from 'react-md/lib/Papers/Paper'
import TextField from 'material-ui/TextField'
import { Icon } from 'osi/bits'
import RaisedButton from 'material-ui/RaisedButton'
import firebase from '../../../../utils/database.react.js'

import {Tabs, Tab} from 'material-ui/Tabs'

import Logotype from 'osi/bits/coindash-type'

export class LoginPage extends Component {
  constructor (props) {
    super(props)
    this.state = {
      waitingOnLogin: false,
      inputs: { },
      tabIndex: 0
    }

    this.inputValues = {}
  }

  componentWillUpdate (nextProps) {
    if (nextProps.user.loggedIn) this.onLogin()
  }

  onLogin () {
    Analytics.event({ category: 'User', action: 'Identify', label: this.state.inputs.ident, nonInteraction: false })
    browserHistory.push('/dashboard')
  }

  signinButton (name, title, {disabled = false} = {}) {
    return <Button className={`signin-with ${name}`} disabled={disabled} onClick={() => this.signinWith(name)} block><FontAwesome name={name} /> Sign in with {title}</Button>
  }
  signinWith (provider) {
    this.setState({ waitingOnLogin: true })
    this.props.userActions.loginProvider(provider)
      .then(res => {
        this.setState({ waitingOnLogin: false })
        this.onLogin()
      })
      .catch(error => {
        this.setState({userError: error, waitingOnLogin: false})
      })
  }
  handleChanges (newValue) {
    this.setState(newValue)
  }

  handleLogin (event) {
    const { email, password } = this.inputValues

    event.preventDefault()

    Analytics.event({category: 'User', action: 'Identify', label: email.replace(/[@.]/, '-'), nonInteraction: false})

    this.setState({ waitingOnLogin: true })
    this.props.userActions.login(email, password)
      .then(() => {
        this.onLogin()
      })
      .catch(error => {
        this.setState({userError: error, waitingOnLogin: false})
      })
  }

  valueChanged (inputName) {
    const input = this.state.inputs[inputName]
    return (event, value) => {
      this.inputValues[inputName] = value
      if (inputName !== 'password2' && ((input && !value) || (!input && value))) {
        this.setState({ inputs: { ...this.state.inputs, [inputName]: !!value } })
      } else if (inputName === 'password2') {
        this.setState({ inputs: { ...this.state.inputs, [inputName]: this.inputValues['password'] === value } })
      }
    }
  }

  handleRegistrationSubmit (event) {
    const { email, password, password2 } = this.inputValues

    event.preventDefault()
    Analytics.event({category: 'User', action: 'Registeration', label: 'activity', nonInteraction: false})
    this.setState({ waiting: true })
    let done = false

    if (password2 === password) {
      firebase.auth().createUserWithEmailAndPassword(email, password)
        .catch(err => {
          this.setState({ waiting: false, userError: err })
          done = true
        })
        .then(_ => {
          if (!done) { // pfft... what a hack...
            this.inputValues = {}
            this.setState({ waiting: false, registered: true, userError: {} })
          }
        })
    }
  }

  render () {
    return (
      <Page className='login x2'>
        <div className='j'>
          <Paper zDepth={4} className='coindash'>
            <div className='version'>
              {packageJson.version}
            </div>
            <div className='logo'>
              <Icon className='coindash-icon' />
              <Logotype />
            </div>
            <div className='texts'>
              <p>Get insight about your crypto portfolio. Benchmark it against the market and other traders. Follow the best performing investors and invest exactly like them with the copy trade feature. Discover new opportunities, and new tools: ICO Dashboard, Automation investment and more...</p>
            </div>
            <div className='feedbacks'>
              <h5>Share your feedback with us</h5>
              <p><a href='mailto:contact@coindash.io'>contact@coindash.io</a></p>
            </div>
          </Paper>
          <Paper zDepth={3} className='form'>
            <div className='tabbed'>
              <TabsExampleSwipeable onTab={newIndex => this.setState({tabIndex: newIndex})} />

              {this.state.tabIndex === 0 && <div className='sign-in'>
                <RaisedButton label='Sign In with Google'
                  fullWidth
                  className='signin-with-google'
                  onClick={e => this.signinWith('google')}
                  style={{
                    height: 40
                  }}
                  backgroundColor='#4885ED'
                  labelColor='#FFF'
                  labelStyle={{
                    textTransform: 'none',
                    fontSize: 14,
                    fontWeight: 'normal'
                  }}
                  icon={<FontAwesome name='google' style={{fontSize: 20, color: '#FFF'}} />} />

                <span className='seperator'>Or</span>

                <form className='actual-form' onSubmit={this.handleRegistrationSubmit.bind(this)}>
                  <TextField
                    fullWidth
                    name='email'
                    hintText='your@name.com'
                    floatingLabelText='Email'
                    onChange={this.valueChanged('email')}
                    errorText={this.state.userError && this.state.userError.code && this.state.userError.code &&
                      (
                        this.state.userError.code.match(/email|user-not-found|user-disabled/)

                      ) && this.state.userError.message}
                  />
                  <TextField
                    fullWidth
                    name='password'
                    type='password'
                    floatingLabelText='Password'
                    onChange={this.valueChanged('password')}
                    errorText={this.state.userError && this.state.userError.code && this.state.userError.code.match(/password/) && this.state.userError.message}
                  />
                  <div className='actions'>
                    <div className='forgot'>
                      <Link to='/login/reset-password'>Forgot password?</Link>
                    </div>
                    <div className='btns'>
                      <RaisedButton
                        type='submit'
                        disabled={!this.state.inputs.password || !this.state.inputs.email}
                        onClick={this.handleLogin.bind(this)}
                        primary label='Sign In' />
                    </div>
                  </div>
                </form>
              </div>}
              {this.state.tabIndex === 1 && !this.state.registered && <div className='register'>
                <form className='actual-form' onSubmit={this.handleRegistrationSubmit.bind(this)}>
                  <TextField
                    fullWidth
                    name='email'
                    hintText='your@name.com'
                    floatingLabelText='Email'
                    onChange={this.valueChanged('email')}
                    errorText={this.state.userError && this.state.userError.code && this.state.userError.code &&
                      (
                        this.state.userError.code.match(/email|user-not-found|user-disabled/)

                      ) && this.state.userError.message}
                  />
                  <TextField
                    fullWidth
                    name='password'
                    type='password'
                    floatingLabelText='Password'
                    onChange={this.valueChanged('password')}
                    errorText={this.state.userError && this.state.userError.code && this.state.userError.code.match(/password/) && this.state.userError.message}
                  />
                  <TextField
                    fullWidth
                    name='password2'
                    type='password'
                    floatingLabelText='Confirm Password'
                    onChange={this.valueChanged('password2')}
                    errorText={this.inputValues.password2 && this.inputValues && this.inputValues.password && this.inputValues.password !== this.inputValues.password2 && 'Password must match'}
                  />
                  <div className='actions'>
                      <RaisedButton
                        type='submit'
                        fullWidth
                        disabled={!this.state.inputs.password || !this.state.inputs.password2 || !this.state.inputs.email}
                        onClick={this.handleRegistrationSubmit.bind(this)}
                        primary label='Sign In' />
                  </div>
                </form>
              </div>}
              {this.state.tabIndex === 1 && this.state.registered && <div className='registered'>
                <h4>Registeration Complete</h4>
                <p>You can now sign in with your email and password.</p>
                <p></p>
                <p>Welcome to Coindash.</p>
              </div>}
            </div>

          </Paper>
        </div>
      </Page>
    )

    return (
      <Page className={['login', this.state.waitingOnLogin && 'is-loading'].join(' ')}>
        <Paper>
          <Card className='login' title='&nbsp;' headerActions={<Link to='/'><FontAwesome name='times' /></Link>}>
            <div className='brand'>
              <Logo version={packageJson.version} />
            </div>

            <h3>Sign In</h3>
            {this.signinButton('google', 'Google')}

            <span className='seperator'>Or</span>

            <div className='up'>
              <form onSubmit={this.handleLogin.bind(this)}>
                <TextField
                  ref='email'
                  type='text'
                  floatingLabelText='Email'
                  onChange={this.valueChanged('email')}
                  hintText='your@name.com'
                  errorText={this.state.userError && this.state.userError.code && this.state.userError.code &&
                    (
                      this.state.userError.code.match(/email|user-not-found|user-disabled/)

                    ) && this.state.userError.message}
                   />

                <TextField id='password'
                  ref='password'
                  type='password'
                  floatingLabelText='Password'
                  onChange={this.valueChanged('password')}
                  errorText={this.state.userError && this.state.userError.code && this.state.userError.code.match(/password/) && this.state.userError.message} />

                <Button type='submit' disabled={!this.state.inputs.password || !this.state.inputs.email} onClick={this.handleLogin.bind(this)} bsStyle='primary' block>Continue</Button>
              </form>

              <hr />
              <div className='beta-test'>
                <p>New User? <Link to='/login/sign-up'>Sign Up</Link></p>
                <p>First time beta tester? <Link to='/login/reset-password'>Reset Password</Link></p>
              </div>
            </div>
            {this.state.waitingOnLogin && <Spinner />}

          </Card>
        </Paper>
      </Page>

    )
  }
}

class TabsExampleSwipeable extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
      slideIndex: 0
    }
  }

  handleChange (value) {
    this.setState({
      slideIndex: value
    })
    this.props.onTab && this.props.onTab(value)
  }

  render () {
    return (
      <div>
        <Tabs
          onChange={this.handleChange.bind(this)}
          value={this.state.slideIndex}
          className='tabs'
        >
          <Tab label='SIGN IN' value={0} />
          <Tab label='REGISTER' value={1} />
        </Tabs>
      </div>
    )
  }
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(LoginPage)
