import React, { Component } from 'react'
import { connect } from 'react-redux'
import { Link, browserHistory } from 'react-router'

import { bindActionCreators } from 'redux'

import * as userActions from '../../../../../../actions/user.actions'
import * as portfolioActions from '../../../../../../actions/portfolio.actions'

// import RaisedButton from 'material-ui/RaisedButton'
import Button from 'react-md/lib/Buttons/Button'
import Card from 'react-md/lib/Cards/Card'
import CardTitle from 'react-md/lib/Cards/CardTitle'
import CardActions from 'react-md/lib/Cards/CardActions'
import CardText from 'react-md/lib/Cards/CardText'

import Dialog from 'material-ui/Dialog'
import TextField from 'material-ui/TextField'
import ActionAnnouncement from 'material-ui/svg-icons/action/announcement'

import PortfoliosList from './portfolios-list'

import Dreams from 'osi/bits/80s'
import { Logo } from 'osi/bits'

import CreatePortfolio from 'osi/components/portman/parts/create-portfolio'
import MessageBlock from 'osi/components/portman/parts/message-block'

import './home.css'

const RaisedButton = (props) => <Button raised {...props}>{props.children}</Button>

class Home extends Component {
  constructor (props) {
    super(props)

    this.state = {
      createPortfolioOpen: false,
      busy: false
    }
  }

  createPortfolio () {
    // console.log('lets create a portfolio')

    this.setState({createPortfolioOpen: true})

    // this.props.portfolioActions.newPortfolio({
    //   name: 'Elis first portfolio',
    //   description: 'My first!',
    //   uid
    // })
    //   .then(pmResult => {
        // console.info('portfolio creation result:', pmResult)
    //   })
  }
  clearPortfolios () {
    // this.props.portfolioActions.clearPortfolios()
  }
  componentWillReceiveProps (nextProps) {
  }
  onPortfolioCreated (dat) {
    // console.info('what is dat?', dat)
    this.props.portfolioActions.loadUserPortfolios(this.props.user.profile.uid)
      .then(res => {
        // console.log('what is res?', res)

        this.setState({createPortfolioOpen: false})
      })
  }
  onCellClicked (event, pf, index) {
    const { portfolio } = this.props
    const { userPortfolios = [] } = portfolio

    // console.log('row/cell clicked:', row, cell)
    // console.log('event', event)
    // console.log('pf', pf)
    // console.log('index', index)

    // const pf = portfolio.portfolios.find()
    // console.log('more', more)
    browserHistory.push(`/p/${pf.portfolio.pid}`)
  }
  onDeletePortfolio (pf) {
    this.props.portfolioActions.removePortfolio(pf)
      .then(_ => this.props.portfolioActions.loadUserPortfolios(this.props.user.profile.uid))
      .then(_ => this.setState({busy: false}))
  }
  render () {
    const { userPortfolios, process } = this.props
    // console.info('user portfolios:', userPortfolios, 'portfolio', portfolio)
    // console.info('portfoliosList:', PortfoliosList)
    return (
      <div className='home'>
        <h2>My Portfolios</h2>

        <CreatePortfolio label='Create new Portfolio' />

        <hr />

        <PortfoliosList
          portfolios={userPortfolios}
          process={process}
          onCellClick={(...args) => this.onCellClicked(...args)}
          onDeletePortfolio={(pf) => this.onDeletePortfolio(pf)}
          onCreatePortfolio={e => this.createPortfolio()} />

        {'do we need the beta notice?' === false && (
          <div className='beta-notice'>

            <Card className='notice'>
              <CardTitle
                avatar={<ActionAnnouncement className='icon' style={{
                  width: 40,
                  height: 40
                }} />}
                title={<h2 className='md-display-1'>Beta Notification</h2>}
                subtitle='Limited Functionality'
              />
              <CardText>
                <p>Please note: during the beta stage each account is limited to 1 portfolio - you may add other portfolios, but they will not function. Only the first portfolio is calculated.</p>
              </CardText>
            </Card>
          </div>
        )}

        <ConnectedCreatePortfolioDialog
          onCancel={e => this.setState({createPortfolioOpen: false})}
          onCreate={pf => this.onPortfolioCreated(pf)}
          isOpen={this.state.createPortfolioOpen} />
      </div>
    )
  }
}

class CreatePortfolioDialog extends Component {
  constructor (props) {
    super(props)

    this.state = {
      allowSubmit: false
    }
  }

  onSubmit (e) {
    const { uid } = this.props.user.profile
    const name = this.refs.name.getValue()
    const description = this.refs.description.getValue()

    const { onCreate = () => {} } = this.props
    e.preventDefault()

    this.props.portfolioActions.newPortfolio({name, description, uid})
      .then(pmResult => {
        onCreate(pmResult)
      })
  }
  valuesUpdated (e) {
    const name = this.refs.name.getValue()
    const { allowSubmit } = this.state
    if ((allowSubmit && !name) || (!allowSubmit && name)) {
      this.setState({allowSubmit: !!name})
    }
  }
  render () {
    const { allowSubmit } = this.state
    return (
      <Dialog
        title='Create Portfolio'
        onRequestClose={e => this.props.onCancel(e)}
        actions={([
          <RaisedButton
            label='Cancel'
            primary={!allowSubmit}
            onClick={e => this.props.onCancel(e)}
          />,
          <RaisedButton
            label='Submit'
            primary
            disabled={!allowSubmit}
            onClick={e => this.onSubmit(e)}
          />
        ])}
        open={this.props.isOpen}
      >
        <form onSubmit={e => this.onSubmit(e)}>
          <div>
            <TextField
              ref='name'
              floatingLabelText='Portfolio name'
              onChange={e => this.valuesUpdated()}
            />
          </div>
          <div>
            <TextField
              ref='description'
              multiLine
              floatingLabelText='Description'
              hintText='Give your portfolio a description'
            />
          </div>
        </form>
      </Dialog>
    )
  }
}

const ConnectedCreatePortfolioDialog = connect(mapStateToProps, mapDispatchToProps)(CreatePortfolioDialog)

const getUserPortfolios = ({portfolio}) => {
  if (!portfolio || !portfolio.userPortfolios) return []

  return portfolio.userPortfolios.map(pid =>
    portfolio.portfolios.find(e => e.portfolio.pid === pid)
  )
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    portfolios: state.portfolio.portfolios,
    userPortfolios: getUserPortfolios(state),
    portfolio: state.portfolio,
    process: state.process
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch),
    portfolioActions: bindActionCreators(portfolioActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(Home)
