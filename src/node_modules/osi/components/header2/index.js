import React, { Component } from 'react'
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { bindActionCreators } from 'redux'

import IconButton from 'material-ui/IconButton'
import Avatar from 'material-ui/Avatar'
import IconMenu from 'material-ui/IconMenu'
import MenuItem from 'material-ui/MenuItem'
import FlatButton from 'material-ui/FlatButton'
import CommunicationEmail from 'material-ui/svg-icons/communication/email'
import SocialPerson from 'material-ui/svg-icons/social/person'
import { Icon, Logo } from 'osi/bits'
import Dreams from 'osi/bits/80s'
import Logotype from 'osi/bits/coindash-type'
import Toggle from 'material-ui/Toggle'
import Divider from 'material-ui/Divider'
import {Toolbar, ToolbarGroup, ToolbarSeparator, ToolbarTitle} from 'material-ui/Toolbar'

import * as userActions from '../../../../actions/user.actions'

import './header.css'

class Login extends Component {
  render () {
    return (
      <FlatButton {...this.props} label='Login' />
    )
  }
}

const adminStyle = {
  boxShadow: '0px 0px 12px 1px #ffcc80'
}
const gmodeStyle = {
  boxShadow: '0px 0px 12px 4px #aa00ff'
}

const UserAvatar = ({photoUrl, size = 64, ...props}) =>
  photoUrl ? <Avatar src={photoUrl} size={size}
    style={(props.gmode && gmodeStyle) || (props.isAdmin && adminStyle)} /> : <SocialPerson className='navatar' style={{width: size, height: size, ...props.style}} />

class Logged extends Component {
  constructor (props) {
    super(props)

    this.state = {
      darkTheme: false
    }
  }
  handleLogout (event) {
    event.preventDefault()
    this.props.userActions.logout()
  }
  onDarkTheme () {
    let isDark = this.props.darkTheme
    this.setState({darkTheme: !isDark})
    this.props.userActions.changeToDark(!isDark)
  }
  render () {
    const { props } = this
    const { user } = props
    const { profile } = user

    const photoUrl = profile && (profile.photoUrl || profile.provider[0].photoURL || false)
    const name = profile && (profile.name || profile.provider[0].displayName || ' ')

    return !user || !profile ? <h1>Hi</h1> : (
      <IconMenu
        className='user-menu'
        ref='userMenu'
        menuStyle={{att: 'user-menu'}}
        iconButtonElement={
          <IconButton className='user' style={{padding: 0}}>
            <UserAvatar
              isAdmin={props.isAdmin}
              gmode={props.gmode}
              size={36}
              photoUrl={photoUrl} />
          </IconButton>
        }
        targetOrigin={{horizontal: 'right', vertical: 'top'}}
        anchorOrigin={{horizontal: 'right', vertical: 'top'}}
      >
        <div className='profile'>
          <UserAvatar photoUrl={photoUrl} size={64} />
          <div className='details'>
            {name && <h3>{name}</h3>}
            <h4>{profile.email}</h4>
          </div>

        </div>
        {'should show theme' === false && (
          <div className='theme'>
            <Toggle
              label='Dark Theme'
              toggled={this.props.darkTheme}
              onToggle={e => this.onDarkTheme()}
            />
          </div>
        )}
        <Divider />
        <MenuItem primaryText='Sign out' onClick={e => this.handleLogout(e)} />
      </IconMenu>
    )
  }
}

Logged.muiName = 'IconMenu'

const LoggedConnected = connect(mapStateToProps, mapDispatchToProps)(Logged)

class RightSide extends Component {
  render () {
    return (
      <div className='right'>
        <IconButton disabled style={{padding: 0}} className='comms'>
          <CommunicationEmail />
        </IconButton>
        <LoggedConnected />
      </div>
    )
  }
}
const RightSideConnected = connect(mapStateToProps, mapDispatchToProps)(RightSide)

class AppHeader extends Component {
  constructor (props) {
    super(props)

    this.state = {
      logged: true,
      userOpen: false
    }
  }
  render () {
    return (
      <Toolbar
        style={{
          background: 'rgba(0, 0, 0, 0.28)',
          minHeight: '60px',
          ...this.props.style
        }}
        className='app-header'
      >
        <ToolbarGroup firstChild className='beta-brand'>
          <FlatButton href='/' onClick={e => {
            e.preventDefault()
            browserHistory.push('/')
          }} className='brand' style={{padding: 3}}>
            <Icon className='coindash-icon' />
            <Logotype />
          </FlatButton>
          <Dreams />
        </ToolbarGroup>
        <ToolbarGroup className='content' />
        <ToolbarGroup lastChild className='rights'>
          {this.state.logged ? <RightSideConnected /> : <Login />}
        </ToolbarGroup>

      </Toolbar>
    )
  }
}

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    isAdmin: state.admin.active,
    gmode: state.admin.gmode,
    darkTheme: state.user.darkTheme
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(AppHeader)
