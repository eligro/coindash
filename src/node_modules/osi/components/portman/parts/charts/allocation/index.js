import React, { Component } from 'react'
import colors from 'styleguide/colors'
import ReactHighcharts from 'react-highcharts/ReactHighcharts.src'
import Spinner from 'osi/bits/spinner'

class AssetAllocationChart extends Component {
  constructor (props) {
    super(props)

    this.state = {
      balancesReady: false
    }
  }
  getChartConfig () {
    const { balances } = this.props
    const total = balances.reduce((acc, val) => acc + val.value, 0)

    const seriesData = balances.map(b => ({name: b.title, y: (b.value / total) * 100}))
    return {
      colors: this.colors(),
      chart: {
        plotBackgroundColor: null,
        plotBorderWidth: null,
        plotShadow: false,
        type: 'pie'
      },
      title: {
        text: 'Assets Allocation Breakdown'
      },
      tooltip: {
        pointFormat: '<b>{point.percentage:.1f}%</b> of portfolio value'
      },
      plotOptions: {
        pie: {
          allowPointSelect: true,
          cursor: 'pointer',
          dataLabels: {
            enabled: false
          },
          showInLegend: true
        }
      },
      series: [{
        name: 'Asset',
        colorByPoint: true,
        data: [...seriesData]
      }]
    }
  }
  colors () {
    const { balances: items } = this.props
    const colKey = items.length < colors.length ? items.length - 1 : colors.length - 1
    const cols = colors[colKey]
    return cols
  }
  componentDidMount () {
    const hasBalances = this.props.balances && this.props.balances.length
    if (hasBalances) {
      this.setState({ balancesReady: hasBalances })
    }
  }
  componentWillReceiveProps (nextProps) {
    const { balancesReady } = this.state
    const hasBalances = nextProps.balances && nextProps.balances.length
    if ((!balancesReady && hasBalances) || (balancesReady && !hasBalances)) {
      this.setState({ balancesReady: hasBalances })
    }
  }
  render () {
    return (
      <div className='allocation-charts'>
        {!this.state.balancesReady && (
          <div className='spinner-container'>
            <Spinner rotateLogo={false}>Calculation in progress...</Spinner>
          </div>
        )}
        {this.state.balancesReady && <ReactHighcharts config={this.getChartConfig()} ref='chart' /> }

      </div>
    )
  }
}

export default AssetAllocationChart
