import React, { PureComponent } from 'react'
import TextField from 'react-md/lib/TextFields'
import Dialog from 'react-md/lib/Dialogs'
import CircularProgress from 'material-ui/CircularProgress'
import ActionDone from 'material-ui/svg-icons/action/done'
import { isEtherAddress } from '../../../../../../../utils'

class AssociateDialog extends PureComponent {
  constructor (props) {
    super(props)

    this.state = {
      isAddress: false,
      addressExists: false,
      error: false
    }
  }

  addressUpdate () {
    const address = this.refs.address.getField().value
    const isAddress = isEtherAddress(address)

    const { addressList = [] } = this.props
    const addressExists = !!addressList.find(e => e.address === address)

    if (
        ((!isAddress && this.state.isAddress) || (isAddress && !this.state.isAddress)) ||
        ((addressExists && !this.state.addressExists) || (!addressExists && this.state.addressExists))
      ) {
      this.setState({isAddress, addressExists})
    }
  }

  onSubmit (e) {
    const address = this.refs.address.getField().value
    const { isAddress, addressExists } = this.state

    e.preventDefault()

    if (isAddress && !addressExists) {
      this.props.onSubmit(address)
    } else if (addressExists) {
      this.setState({error: {
        address,
        addressExists
      }})
    } else {
      this.setState({error: {
        address,
        isAddress
      }})
    }
  }
  render () {
    const { isOpen, onClose } = this.props
    const { error } = this.state
    const errorText = error && ((error.isAddress && 'Value is not a valid ethereum address') || (error.addressExists && 'Address already exists'))
    return (
      <Dialog
        id='associate-address'
        visible={isOpen}
        title='Associate address with portfolio'
        onHide={e => {
          this.setState({error: false, isAddress: false, addressExists: false})
          onClose(e)
        }}
        aria-labelledby='Associate account...'
        component='div'
        closeOnEsc
        actions={[{
          onClick: onClose,
          primary: !this.state.isAddress,
          label: 'Cancel'
        }, {
          onClick: e => this.onSubmit(e),
          primary: true,
          disabled: !this.state.isAddress,
          label: 'Submit'
        }]}
       >

        <p>Enter a valid Ethereum address:</p>
        <form onSubmit={e => this.onSubmit(e)} className='address'>
          <TextField
            id='address'
            ref='address'
            label='Account address'
            type='text'
            error={!!error}
            errorText={errorText}
            helpText='e.g. 0x71CF9f77F1...'
            onChange={e => this.addressUpdate(e)}
            rightIcon={this.state.isAddress ? <ActionDone size={28} /> : (<span>&nbsp;</span> || (false && <CircularProgress size={28} />))}
            className='md-cell md-cell--bottom' />
        </form>

      </Dialog>
    )
  }
}

export default AssociateDialog
