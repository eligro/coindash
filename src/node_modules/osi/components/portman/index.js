import firebase from '../../../../utils/database.react.js'
import { getCurrentUser } from 'osi/auth'
import { usersPath } from 'osi/user'

export const portfoliosPath = 'portfolios'
const db = firebase.database()
const portfoliosRef = db.ref(portfoliosPath)

export const createPortfolio = ({name, uid, description}) => {
  let newPKey = portfoliosRef.push().key
  let newUPKey = db.ref(`${usersPath}/${uid}/portfolios`).push().key

  // create a portfolio in `portfolios` and link it to the user at `users/$uid/portfolios`
  let updates = {}
  updates[`${usersPath}/${uid}/portfolios/${newUPKey}`] = newPKey
  updates[`${portfoliosPath}/${newPKey}`] = {
    name,
    owner: uid,
    description
  }

  return db.ref().update(updates)
    .then(e => {
      console.log('result of updates:', updates)
      return e
    })
}

export const getPortfolio = pfid => {
  return portfoliosRef.child(pfid).once('value')
    .then(snp => snp.val())
}

export const getUserPortfolios = (uid, {fromIndex, limit = 50} = {}) => {
  let userPortfoliosRef = db.ref(`${usersPath}/${uid}/portfolios`)

  return new Promise((resolve, reject) => {
    let children = []
    userPortfoliosRef.limitToFirst(limit).once('value', snp => {
      console.info('snapshot:', snp)
      snp.forEach(csnp => { children.push({key: csnp.key, pfid: csnp.val()}) })
      console.log('children by now?', children)

      let promises = children.map(
        ({pfid, key}) => getPortfolio(pfid)
          .then(pf => {
            console.log('result of get portfolio:', pf)
            return {
              pfid,
              portfolio: pf,
              userKey: key
            }
          })
      )

      Promise.all(promises)
        .then(portfolios => {
          resolve(portfolios)
        })

      // resolve(children)
    })
  })
}
