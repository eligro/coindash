import React, { Component } from 'react'
import { connect } from 'react-redux'
import { browserHistory } from 'react-router'
import { bindActionCreators } from 'redux'

import Avatar from 'material-ui/Avatar'
import FlatButton from 'material-ui/FlatButton'
import SocialPerson from 'material-ui/svg-icons/social/person'
import NavigationExpandLess from 'material-ui/svg-icons/navigation/expand-less'
import NavigationExpandMore from 'material-ui/svg-icons/navigation/expand-more'
import AlertError from 'material-ui/svg-icons/alert/error'
import { Icon } from 'osi/bits'
import Dreams from 'osi/bits/80s'
import Logotype from 'osi/bits/coindash-type'
import { Toolbar, ToolbarGroup } from 'material-ui/Toolbar'
import Popover, {PopoverAnimationVertical} from 'material-ui/Popover'

import * as userActions from '../../../../actions/user.actions'

import './header.css'

class AppHeader extends Component {
  onSignout (event) {
    event.preventDefault()
    this.props.userActions.logout()
  }
  render () {
    const { loggedIn } = this.props.user || {}

    return (
      <Toolbar
        style={{
          background: 'rgba(10, 10, 10, 1)',
          minHeight: '60px',
          ...this.props.style
        }}
        className='app-header x2'
      >
        <ToolbarGroup firstChild className='beta-brand'>
          <FlatButton
            href='/'
            onClick={e => {
              e.preventDefault()
              browserHistory.push('/')
            }}
            className='brand'
            style={{padding: 3, margin: '10px'}}>
            <Icon className='coindash-icon' />
            <Logotype />
          </FlatButton>
          <Dreams />
        </ToolbarGroup>
        <ToolbarGroup className='content' />
        <ToolbarGroup className='rights'>
          {loggedIn ? <UserMenu
            isAdmin={this.props.isAdmin}
            gmode={this.props.gmode}
            onSignout={this.onSignout.bind(this)}
            user={this.props.user} /> : <AlertError />}
        </ToolbarGroup>

      </Toolbar>
    )
  }
}

class UserMenu extends Component {
  constructor (props) {
    super(props)

    this.state = {
      open: false
    }
  }

  handleTouchTap (event) {
    // This prevents ghost click.
    event.preventDefault()

    this.setState({
      open: true,
      anchorEl: event.currentTarget
    })
  }
  handleLogout (event) {
    event.preventDefault()
    this.props.userActions.logout()
  }

  handleRequestClose () {
    this.setState({ open: false })
  }

  render () {
    const { user } = this.props
    const { photoUrl, name, email } = user && user.profile

    const displayName = name || email.split('@').shift()

    return (
      <div>
        <FlatButton
          onTouchTap={this.handleTouchTap.bind(this)}
          style={{
            color: '#FFF',
            padding: 0,
            height: '100%'
          }}
          labelStyle={{textTransform: 'none'}}
          className='user-menu'
        >
          <UserAvatar
            isAdmin={this.props.isAdmin}
            gmode={this.props.gmode}
            photoUrl={photoUrl} size={29} />
          <span className='name'>{displayName}</span>

          {!this.state.open && <NavigationExpandMore className='expand' style={{color: '#AAA'}} />}
          {this.state.open && <NavigationExpandLess className='expand' style={{color: '#AAA'}} />}
        </FlatButton>
        <Popover
          className='user-popover'
          open={this.state.open}
          anchorEl={this.state.anchorEl}
          anchorOrigin={{horizontal: 'right', vertical: 'top'}}
          targetOrigin={{horizontal: 'right', vertical: 'top'}}
          onRequestClose={this.handleRequestClose.bind(this)}
          animation={PopoverAnimationVertical}
        >
          <div className='profile'>
            <UserAvatar
              photoUrl={photoUrl} size={64} />
            <div className='details'>
              {name && <h3>{name}</h3>}
              <h4>{email}</h4>
            </div>

          </div>
          <div className='actions'>
            <span className='spacer' />
            <FlatButton
              className='signout'
              style={{height: 'auto'}}
              label='Sign out'
              onClick={this.props.onSignout} />
          </div>
        </Popover>
      </div>
    )
  }
}

const adminStyle = {
  boxShadow: '0px 0px 12px 1px #ffcc80'
}
const gmodeStyle = {
  boxShadow: '0px 0px 12px 4px #aa00ff'
}

const UserAvatar = ({photoUrl, size = 64, ...props}) =>
  photoUrl ? <Avatar src={photoUrl} size={size}
    style={(props.gmode && gmodeStyle) || (props.isAdmin && adminStyle)} /> : <SocialPerson className='navatar' style={{width: size, color: '#EEE', height: size, ...props.style}} />

function mapStateToProps (state, ownProps) {
  return {
    user: state.user,
    isAdmin: state.admin.active,
    gmode: state.admin.gmode,
    darkTheme: state.user.darkTheme
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(AppHeader)
