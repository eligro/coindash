import React from 'react'
import Dialog from 'material-ui/Dialog'
import FlatButton from 'material-ui/FlatButton'
import RaisedButton from 'material-ui/RaisedButton'
import {Card, CardActions, CardHeader, CardText} from 'material-ui/Card'
import Avatar from 'material-ui/Avatar'
import TextField from 'material-ui/TextField'
import AutoComplete from 'material-ui/AutoComplete'
import Toggle from 'material-ui/Toggle'

import InfoIcon from 'material-ui/svg-icons/action/info'

import {
  blue300,
  indigo900,
  orange200,
  deepOrange300,
  pink400,
  purple500
} from 'material-ui/styles/colors'

import {
  Step,
  Stepper,
  StepLabel,
  StepButton
} from 'material-ui/Stepper'

import './add-token.dialog.css'

import { unitMap } from '../../../../../utils/Trades/Token'
import StepperWrapper, { StepWrapper } from './stepper'

import { isEtherAddress } from '../../../../../utils'

/**
 * Dialog with action buttons. The actions are passed in as an array of React objects,
 * in this example [FlatButtons](/#/components/flat-button).
 *
 * You can also close this dialog by clicking outside the dialog, or with the 'Esc' key.
 */
export default class AddTokenDialog extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
      open: false,
      finished: false,
      stepIndex: 0,
      decimalUnits: [Object.keys(unitMap)],
      errors: {},
      inputs: {
        address: '',
        icoAddress: '',
        symbol: '',
        decimals: '',
        price: '',
        customContract: false
      }
    }
  }

  handleNext () {
    const {stepIndex} = this.state
    this.setState({
      stepIndex: stepIndex + 1,
      finished: stepIndex >= 2
    })
  }

  handlePrev () {
    const {stepIndex} = this.state
    if (stepIndex > 0) {
      this.setState({stepIndex: stepIndex - 1})
    }
  }

  handleOpen () {
    this.setState({open: true})
  }

  handleClose () {
    this.props.then({close: true})
  }

  verifyAddress (stateName) {
    return (e, newValue) => {
      const isAddress = isEtherAddress(newValue)
      this.setState({ inputs: { ...this.state.inputs, [stateName]: newValue } })
      this.setState({ errors: { ...this.state.inputs, [stateName]: !isAddress ? 'Not a valid Ethereum address' : null } })
    }
  }
  shouldComponentUpdate (nextProps, nextState) {
    if (nextState.inputs) {
      console.info('inputs:', nextState.inputs)
      if (nextState.inputs.address) {
        this.setState({finished: true})
      }
    }
    return true
  }

  render () {
    const { stepIndex } = this.state
    const steps = 3
    const last = stepIndex === steps - 1

    const actions = [
      <FlatButton
        label='Cancel'
        primary
        onTouchTap={this.handleClose.bind(this)}
      />,
      stepIndex > 0 && <RaisedButton
        label='Back'
        onTouchTap={this.handlePrev.bind(this)}
      />,
      stepIndex < steps - 1 && <RaisedButton
        label='Next'
        primary
        onTouchTap={this.handleNext.bind(this)}
      />,
      last && <RaisedButton
        label='Add Token'
        primary
        disabled={!this.state.finished}
        onTouchTap={this.handleClose.bind(this)}
      />
    ]

    return (
      <Dialog
        className='add-token dialog'
        bodyClassName='body'
        contentClassName='content'
        actionsContainerClassName='actions'
        title='Add Custom Token'
        actions={actions}
        modal
        open={this.props.open}
        onRequestClose={this.handleClose.bind(this)}
      >
        <StepperWrapper
          onStep={(newIndex) => this.setState({stepIndex: newIndex})}
          activeStep={stepIndex}>

          <StepWrapper title='Account Address'
            help='Enter a valid Ethereum address into the input box'

            >
            <TextField name='address'
              errorText={this.state.errors.address}
              fullWidth
              floatingLabelText='Ethereum Address'
              hintText='e.g. 0x7FE2B88F2e4858dE375832FbF54aC7Cf1A78ca51'
              value={this.state.inputs.address}
              onChange={this.verifyAddress('address')} />

          </StepWrapper>
          <StepWrapper title='Symbol'
            help='Symbol for the token - usally 3-4 charachters in uppercase form; e.g. PLU'

            >
            <TextField name='symbol'
              fullWidth
              floatingLabelText='Symbol'
              hintText='e.g. ACE'
              value={this.state.inputs.symbol}
              onChange={(e, newValue) => this.setState({ inputs: { ...this.state.inputs, symbol: newValue } })} />

          </StepWrapper>
          <StepWrapper title='Token Options'
            help='Symbol for the token - usally 3-4 charachters in uppercase form; e.g. PLU'

            >
            <TextField name='decimals'
              fullWidth
              floatingLabelText='Decimals'
              hintText='e.g. 3'
              value={this.state.inputs.decimals}
              onChange={(e, newValue) => this.setState({ inputs: { ...this.state.inputs, decimals: newValue } })} />

            <TextField name='price'
              fullWidth
              floatingLabelText='Initial Token Price in USD'
              hintText='3.67'
              value={this.state.inputs.price}
              onChange={(e, newValue) => this.setState({ inputs: { ...this.state.inputs, price: newValue } })} />

            <Toggle
              style={{
                marginTop: '1.3em'
              }}
              label='Token has Custom ICO Contract'
              toggled={this.state.inputs.customContract}
              onToggle={(e, checked) => this.setState({ inputs: { ...this.state.inputs, customContract: checked } })}
                      />
            {this.state.inputs.customContract && (
              <TextField name='ico-address'
                errorText={this.state.errors.icoAddress}
                fullWidth
                floatingLabelText='Custom ICO Address'
                hintText='e.g. 0x7FE2B88F2e4858dE375832FbF54aC7Cf1A78ca51'
                value={this.state.inputs.icoAddress}
                onChange={this.verifyAddress('icoAddress')} />
            )}

          </StepWrapper>
        </StepperWrapper>
        {last && !this.state.finished && (
          <div className='notif'>
            Please fill in all values
          </div>
        )}
      </Dialog>
    )
  }
}

/*

<Modal show={this.state.showAddToken} onHide={this.closeAddToken}>
  <Modal.Header closeButton>
    <Modal.Title>Add Token</Modal.Title>
  </Modal.Header>
  <Modal.Body>
    <AddTokenForm token={this.state.token} />
  </Modal.Body>
  <Modal.Footer>
    <Button onClick={() => { this.addToken(); this.closeAddToken() }}>Add</Button>
    <Button onClick={this.closeAddToken}>Cancel</Button>
  </Modal.Footer>
</Modal>

*/
