import React, { Component } from 'react'
import { connect } from 'react-redux'
import { browserHistory, Link } from 'react-router'

import { bindActionCreators } from 'redux'

import * as userActions from '../../../../../../actions/user.actions'
import * as portfolioActions from '../../../../../../actions/portfolio.actions'

// import RaisedButton from 'material-ui/RaisedButton'
import Button from 'react-md/lib/Buttons/Button'
import {Card, CardHeader, CardText} from 'material-ui/Card'
import Dialog from 'material-ui/Dialog'
import TextField from 'material-ui/TextField'
import ActionAnnouncement from 'material-ui/svg-icons/action/announcement'
import PageContent from 'osi/components/portman/parts/page-content'
import Paper from 'react-md/lib/Papers'

import { ToolbarGroup, Toolbar, ToolbarTitle, IconButton } from 'material-ui'
import NavigationMoreVert from 'material-ui/svg-icons/navigation/more-vert'

import NavigationArrowBack from 'material-ui/svg-icons/navigation/arrow-back'
import MessageBlock from 'osi/components/portman/parts/message-block'
import CircularProgress from 'material-ui/CircularProgress'

import * as Coupons from 'osi/user/coupons'
import './presale.css'

const RaisedButton = (props) => <Button raised {...props}>{props.children}</Button>

class PresalePage extends Component {
  constructor (props) {
    super(props)

    this.state = {
      busy: false,
      insertCouponError: false,
      hasCoupon: false
    }
  }

  componentWillUpdate (nextProps, nextState) {
    console.log('================================================ we ready.')
    if (nextProps && nextProps.user && nextProps.user.profile && !nextState.busy && !nextState.couponChecked) {
      this.checkForUserCoupon(nextProps)
    }
  }

  componentWillMount () {
    this.checkForUserCoupon(this.props)
  }

  checkForUserCoupon (props = this.props) {
    this.setState({busy: true}, dp => {
      Coupons.userHasCoupon(props.user.profile.uid)
        .then(res => {
          this.setState({
            busy: false,
            couponChecked: true,
            hasCoupon: res
          }, c => {
            console.log('stated?', c)
          })
          console.log('does user has coupon?', res)
        })
    })
  }

  attemptCoupon (e) {
    const coupon = this.couponValue
    e.preventDefault()

    console.log('do coupon!', coupon)
    console.log('do user!', this.props.user)
    Coupons.isCouponValid(coupon)
      .then(isValid => {
        console.log('is coupon valid?', isValid)
        if (isValid) {
          Coupons.useCoupon(coupon, this.props.user.profile.uid)
            .then(data => {
              console.log('data for coupon:', data)
              this.checkForUserCoupon()
            })
        } else {
          this.setState({insertCouponError: {
            text: 'Coupon code invalid'
          }})
        }
      })
  }

  addCoupon (e) {
    e.preventDefault()

    Coupons.addCoupon(this.addCouponValue)
      .then(res => {
        console.log('is coupon valid?', res)
      })
  }

  getCouponValue () {
    console.log('getCouponValue')
    Coupons.getCouponValue()
      .then(res => {
        console.log('my coupon value is:', res)
      })
  }

  onCouponValueChanged (e, v) {
    this.couponValue = v
  }

  genCoupons () {
    this.setState({busy: true})
    const rf = _ => Math.floor(Math.random()*100000000000).toString(35)
    const df = _ => `${rf()}-${rf()}-${rf()}-${rf()}`
    let coupons = []
    for (let i = 0; i < 100; ++i) {
      coupons.push(df())
    }

    const proms = coupons.map(c => Coupons.addCoupon(c)
      .then(res => {
        console.log('is coupon valid?', res)
      }))

    Promise.all(proms)
      .then(_ => {
        console.log('coupons added:', proms)
      })

    console.log('coupons:', coupons)
  }

  render () {
    const alignToStart = { alignItems: 'flex-start' }
    const whiteIcon = { color: '#FFF' }

    console.log('here user:', this.props.user)
    // console.info('portfoliosList:', PortfoliosList)

    let enterCoupon =  (
      <MessageBlock className='insert-coupon' actions={(
        <RaisedButton onClick={e => this.attemptCoupon(e)} type='submit' label='Attempt Coupon' />
      )}>
        <h3>Have a coupon?</h3>
        <form className='coupons' onSubmit={e => this.attemptCoupon(e)}>
          <TextField
            errorText={this.state.insertCouponError && this.state.insertCouponError.text}
            id='coupon-input'
            floatingLabelText='Enter Coupon'
            onChange={(e, v) => this.onCouponValueChanged(e, v)} />
        </form>
      </MessageBlock>
      )

    let redeemed = (
      <div className='insert-coupon'>
        <h3>Coupon Reedemed!</h3>
        <p>You have successfully redeemed your coupon for the ICO presale.</p>
        <br/>
        <p>T&Cs here...</p>

        <p><label><input type='checkbox' /> I agree to terms & conditions</label></p>
        <p><label><input type='checkbox' /> I am not an Israeli or a US citizen</label></p>
        <RaisedButton onClick={e => this.setState({revealCode: !this.state.revealCode})} primary label='I Agree and Reveal ICO Address' />

        <p>ICO Address: <code>{this.state.revealCode ? this.state.hasCoupon : 'Press "Reveal ICO Address below"'}</code></p>
      </div>
      )

    let enterOrRedeemed = this.state.hasCoupon ? redeemed : enterCoupon

    return (
      <div className='presale'>

        <PageContent>

          <header>
            <Paper zDepth={1} className='head' style={{borderRadius: 0}}>
              <Toolbar className='one' style={{
                background: 'rgba(52, 84, 209, 1)'
              }}>

                <ToolbarGroup className='back' style={alignToStart}>
                  <h3>Coindash Community Presale</h3>
                </ToolbarGroup>
              </Toolbar>
            </Paper>
          </header>
          <multi>
            {this.state.busy ?  <CircularProgress /> : enterOrRedeemed}
          </multi>
          {false && <primary>
            <hr />
            <hr />

            <h4>Admin</h4>

            <form className='coupons' onSubmit={e => this.addCoupon(e)}>
              <legend>Add Coupon Here</legend>
              <TextField id='coupon-input' floatingLabelText='Enter Coupon' onChange={(e, v) => this.addCouponValue = v} />
              <RaisedButton onClick={e => this.addCoupon(e)} type='submit' label='Add Coupon' />
            </form>

          </primary>}
          <secondary>
            <RaisedButton fullwidth onClick={e => this.genCoupons()} primary label='Generate 100 Coupons' />
          </secondary>
        </PageContent>

      </div>
    )
  }
}


function mapStateToProps (state, ownProps) {
  return {
    user: state.user
  }
}

function mapDispatchToProps (dispatch) {
  return {
    userActions: bindActionCreators(userActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(PresalePage)
