import React from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import { Modal, Button } from 'react-bootstrap'
import * as exchangeActions from '../../../../actions/exchange.actions'
import { ETHWallet } from '../../../../utils/Accounts/Ethereum/ETHWallet'

import { recordEvent } from 'osi/analytics'
import { List, ListItem } from 'material-ui/List'
import { Card } from 'material-ui/Card'

import Page from '../../components/page/page.react'
// import Card from '../../components/card/card.react'

import SocialDomain from 'material-ui/svg-icons/social/domain'
import SocialPerson from 'material-ui/svg-icons/social/person'
// import Divider from 'material-ui/Divider'
import { grey400 } from 'material-ui/styles/colors'
import './tokens.css'

import IconButton from 'material-ui/IconButton'
import MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert'
import IconMenu from 'material-ui/IconMenu'
import MenuItem from 'material-ui/MenuItem'

const iconButtonElement = (
  <IconButton
    touch
    tooltip='more'
    tooltipPosition='bottom-left'
  >
    <MoreVertIcon color={grey400} />
  </IconButton>
)

class TokensPage extends React.Component {
  constructor (props, context) {
    super(props, context)

    this.state = {
      exchange: {type: 'ethereum', token: '', secret: '', created: ''}, showModal: false
    }

        // this.titleChange = this.titleChange.bind(this);
    this.tokenChange = this.tokenChange.bind(this)
    this.createExchange = this.createExchange.bind(this)
    this.deleteExchange = this.deleteExchange.bind(this)

    this.tempFunc = this.tempFunc.bind(this)
    this.close = this.close.bind(this)
    this.open = this.open.bind(this)
  }

    /* titleChange(event) {
        const exchange = this.state.exchange;
        exchange.title = event.target.value;
        this.setState({exchange: exchange});
    } */

  close () {
    this.setState({ showModal: false })
  }

  open (index) {
    this.setState({ showModal: true, index: index })
  }

  tokenChange (event) {
    const exchange = this.state.exchange
    exchange.token = event.target.value
    this.setState({exchange: exchange})
  }

  createExchange (event) {
    let { token, ...props } = this.state.exchange
    props = {...props, token: token.trim()}
    this.props.actions.createExchange(props)
    recordEvent('add address', {
      props
    })
  }

  deleteExchange () {
    console.log('delete exchange', this.state.index)
    this.props.actions.deleteExchange(this.state.index)
  }

  tempFunc () {
  }

  toggleToken (token, isActive) {
    token.isInactive = !isActive
  }

  isTokenToggled (token) {
    return !token.isInactive
  }

  render () {
    const tokens = ETHWallet.allTokens()
    return (
      <Page className='tokens'>
        <h2>My Tokens</h2>

        <div className='legend'>
          <span style={{color: grey400}}><SocialPerson style={{width: '18px', height: '18px'}} color={grey400} /> User Tokens</span>
          <span style={{color: grey400}}><SocialDomain style={{width: '18px', height: '18px'}} color={grey400} /> System Tokens</span>
        </div>

        <Card>
          <List className='tokens list'>
            {tokens.map(t => (
              <ListItem
                key={t.symol + t.contractAddress}
                className={['token', t.isCustom ? 'custom' : 'default'].join(' ')}
                primaryText={t.symbol}
                secondaryText={t.contractAddress}
                insetChildren
                disableKeyboardFocus
                leftIcon={t.isCustom ? <SocialPerson color={grey400} /> : <SocialDomain color={grey400} />}
                rightIconButton={t.isCustom ? <IconMenu iconButtonElement={iconButtonElement}>
                  <MenuItem onClick={() => ETHWallet.removeToken(t)}>Delete</MenuItem>
                </IconMenu> : null}
            />
            )
          )}
          </List>
        </Card>
        <Modal show={this.state.showModal} onHide={this.close}>
          <Modal.Header>
            <Modal.Title>Delete Account?</Modal.Title>
          </Modal.Header>

          <Modal.Body>
                        Are you sure that you want to delete the account?
                    </Modal.Body>

          <Modal.Footer>
            <Button bsStyle='primary' onClick={this.close}>No</Button>
            <Button bsStyle='primary' onClick={() => { this.deleteExchange(); this.close() }} >Yes</Button>
          </Modal.Footer>
        </Modal>
      </Page>

    )
  }
}

TokensPage.propTypes = {
  exchanges: PropTypes.array.isRequired,
  actions: PropTypes.object.isRequired
}

function mapStateToProps (state, ownProps) {
  return {
    exchanges: state.exchanges
  }
}

function mapDispatchToProps (dispatch) {
  return {
    actions: bindActionCreators(exchangeActions, dispatch)
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(TokensPage)
